definitions:
  content_service.Empty:
    type: object
  content_service.NewResponse:
    properties:
      new:
        items:
          $ref: '#/definitions/content_service.News'
        type: array
    type: object
  content_service.News:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      formatted_date:
        type: string
      full_text:
        type: string
      id:
        type: string
      image_url:
        type: string
      lang:
        type: string
      meta:
        $ref: '#/definitions/content_service.News_Meta'
        type: object
      preview_image:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  content_service.News_Meta:
    properties:
      description:
        type: string
      tags:
        type: string
      title:
        type: string
    type: object
  content_service.Normative:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      lang:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      url_link:
        type: string
    type: object
  content_service.NormativeResponse:
    properties:
      normative:
        $ref: '#/definitions/content_service.Normative'
        type: object
    type: object
  content_service.Page:
    properties:
      active:
        type: boolean
      content:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      lang:
        type: string
      meta:
        $ref: '#/definitions/content_service.Page_Meta'
        type: object
      preview_image:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  content_service.Page_Meta:
    properties:
      description:
        type: string
      tags:
        type: string
      title:
        type: string
    type: object
  content_service.PageResponse:
    properties:
      page:
        items:
          $ref: '#/definitions/content_service.Page'
        type: array
    type: object
  discussion_logic_service.CreateRelationHeadHasManyStepsRequest:
    properties:
      head_id:
        type: string
      step_id:
        type: string
    type: object
  discussion_logic_service.CreateRelationTailSendsStepRequest:
    properties:
      step_id:
        type: string
      tail_id:
        type: string
    type: object
  discussion_logic_service.Parallel:
    properties:
      diagram_id:
        type: string
      head_id:
        type: string
      position:
        $ref: '#/definitions/discussion_logic_service.Position'
        type: object
      tail:
        $ref: '#/definitions/discussion_logic_service.Tail'
        type: object
      type:
        type: string
    type: object
  discussion_logic_service.Position:
    properties:
      x:
        type: integer
      "y":
        type: integer
    type: object
  discussion_logic_service.Tail:
    properties:
      diagram_id:
        type: string
      position:
        $ref: '#/definitions/discussion_logic_service.Position'
        type: object
      tail_id:
        type: string
      type:
        type: string
    type: object
  ek_content_service.CreateNormative:
    properties:
      active:
        type: boolean
      date:
        type: string
      description:
        type: string
      lang:
        type: string
      title:
        type: string
      url_link:
        type: string
    type: object
  ek_content_service.CreatePage:
    properties:
      active:
        type: boolean
      content:
        type: string
      description:
        type: string
      image:
        type: string
      lang:
        type: string
      meta:
        $ref: '#/definitions/ek_content_service.Meta'
        type: object
      preview_image:
        type: string
      title:
        type: string
    type: object
  ek_content_service.ListNormativeResponse:
    properties:
      count:
        example: "0"
        type: string
      normative:
        items:
          $ref: '#/definitions/ek_content_service.NormativeSlim'
        type: array
    type: object
  ek_content_service.Meta:
    properties:
      description:
        type: string
      tags:
        type: string
      title:
        type: string
    type: object
  ek_content_service.NewCreate:
    properties:
      active:
        type: boolean
      description:
        type: string
      full_text:
        type: string
      image_url:
        type: string
      lang:
        type: string
      meta:
        $ref: '#/definitions/ek_content_service.Meta'
        type: object
      preview_image:
        type: string
      title:
        type: string
    type: object
  ek_content_service.NewsResponse:
    properties:
      count:
        example: "0"
        type: string
      news:
        items:
          $ref: '#/definitions/ek_content_service.NewsSlim'
        type: array
    type: object
  ek_content_service.NewsSlim:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      formated_date:
        type: string
      full_text:
        type: string
      id:
        type: string
      lang:
        type: string
      preview_image:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  ek_content_service.NormativeSlim:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      lang:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      url_link:
        type: string
    type: object
  ek_content_service.Page:
    properties:
      active:
        type: boolean
      content:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      lang:
        type: string
      meta:
        $ref: '#/definitions/ek_content_service.Meta'
        type: object
      preview_image:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  ek_content_service.PageResponse:
    properties:
      page:
        items:
          $ref: '#/definitions/ek_content_service.Page'
        type: array
    type: object
  ek_discussion_logic_service.ActionSendsStepRelationResponse:
    properties:
      id:
        type: string
    type: object
  ek_discussion_logic_service.BusinessType:
    properties:
      code:
        type: integer
      created_at:
        type: string
      description:
        type: string
      diagram:
        $ref: '#/definitions/ek_discussion_logic_service.Diagram'
        type: object
      diagram_id:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  ek_discussion_logic_service.CreateAction:
    properties:
      description:
        type: string
      name:
        type: string
      next_status_id:
        type: string
      order:
        type: integer
      step_id:
        type: string
      type:
        type: string
    required:
    - description
    - name
    - next_status_id
    - order
    - step_id
    - type
    type: object
  ek_discussion_logic_service.CreateDiagramStepRelationRequestSwag:
    properties:
      diagram_id:
        type: string
      step_id:
        type: string
    type: object
  ek_discussion_logic_service.CreateFinishActionRelationRequestSwag:
    properties:
      action_id:
        type: string
      finish_id:
        type: string
    required:
    - action_id
    - finish_id
    type: object
  ek_discussion_logic_service.CreateUpdateBusinessTypeSwag:
    properties:
      code:
        type: integer
      description:
        type: string
      diagram_id:
        type: string
      name:
        type: string
    type: object
  ek_discussion_logic_service.CreateUpdateDiagramSwag:
    properties:
      description:
        type: string
      name:
        type: string
      position_x:
        type: integer
      position_y:
        type: integer
      type_code:
        type: integer
    type: object
  ek_discussion_logic_service.CreateUpdateFinishSwag:
    properties:
      diagram_id:
        type: string
      position:
        $ref: '#/definitions/ek_discussion_logic_service.Position'
        type: object
      type:
        type: string
    required:
    - diagram_id
    - position
    - type
    type: object
  ek_discussion_logic_service.CreateUpdateParallelHeadSwag:
    properties:
      diagram_id:
        type: string
      position_head_x:
        type: integer
      position_head_y:
        type: integer
    type: object
  ek_discussion_logic_service.CreateUpdateParallelTailSwag:
    properties:
      diagram_id:
        type: string
      head_id:
        type: string
      position_tail_x:
        type: integer
      position_tail_y:
        type: integer
    type: object
  ek_discussion_logic_service.CreateUpdateStepSwag:
    properties:
      actions:
        items:
          $ref: '#/definitions/ek_discussion_logic_service.CreateAction'
        type: array
      deadline:
        type: integer
      default_action_id:
        type: string
      description:
        type: string
      diagram_id:
        type: string
      name:
        type: string
      organization_id:
        type: string
      organization_name:
        type: string
      position_x:
        type: integer
      position_y:
        type: integer
      role_id:
        type: string
      role_name:
        type: string
      type:
        type: string
    type: object
  ek_discussion_logic_service.Diagram:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      position:
        $ref: '#/definitions/ek_discussion_logic_service.Position'
        type: object
      type_code:
        type: integer
      updated_at:
        type: string
    type: object
  ek_discussion_logic_service.GetAllBusinessTypesResponse:
    properties:
      business_types:
        items:
          $ref: '#/definitions/ek_discussion_logic_service.BusinessType'
        type: array
      count:
        type: integer
    type: object
  ek_discussion_logic_service.GetAllDiagramsResponse:
    properties:
      business_types:
        items:
          $ref: '#/definitions/ek_discussion_logic_service.Diagram'
        type: array
      count:
        type: integer
    type: object
  ek_discussion_logic_service.GetOneStep:
    properties:
      created_at:
        type: integer
      deadline:
        type: integer
      description:
        type: string
      diagram_id:
        type: string
      id:
        type: string
      name:
        type: string
      organization_id:
        type: string
      organization_name:
        type: string
      position_x:
        type: integer
      position_y:
        type: integer
      role_id:
        type: string
      role_name:
        type: string
      type:
        type: string
      updated_at:
        type: integer
    type: object
  ek_discussion_logic_service.GetPrevStatus:
    properties:
      code:
        type: integer
      entity_id:
        type: string
      status_id:
        type: string
    required:
    - code
    - entity_id
    - status_id
    type: object
  ek_discussion_logic_service.GetStepByRoleIDResponseSwag:
    properties:
      actions:
        items:
          $ref: '#/definitions/ek_discussion_logic_service.RoleActionsSwag'
        type: array
    type: object
  ek_discussion_logic_service.GetStepByRoleIDSwag:
    properties:
      code:
        type: integer
      organizations:
        additionalProperties:
          type: boolean
        type: object
      status_id:
        type: string
    required:
    - code
    - status_id
    type: object
  ek_discussion_logic_service.ParallelOrganizationSwag:
    properties:
      organization_id:
        type: string
      organization_name:
        type: string
    type: object
  ek_discussion_logic_service.Position:
    properties:
      x:
        type: integer
      "y":
        type: integer
    type: object
  ek_discussion_logic_service.RoleActionsSwag:
    properties:
      deadline:
        type: integer
      id:
        type: string
      name:
        type: string
      next_status_id:
        type: string
      order:
        type: integer
      organizations:
        items:
          $ref: '#/definitions/ek_discussion_logic_service.ParallelOrganizationSwag'
        type: array
      type:
        type: string
    type: object
  ek_discussion_logic_service.UpdateAction:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      next_status_id:
        type: string
      order:
        type: integer
      type:
        type: string
    type: object
  ek_discussion_logic_service.UpdateActionSendsParallelRequestSwag:
    properties:
      action_id:
        type: string
      parallel_head_id:
        type: string
      parallel_tail_id:
        type: string
    required:
    - action_id
    type: object
  ek_discussion_logic_service.UpdateActionSendsStepRequestSwag:
    properties:
      action_id:
        type: string
      step_id:
        type: string
    required:
    - action_id
    - step_id
    type: object
  ek_discussion_logic_service.UpdateHeadTailParallelSwag:
    properties:
      position_x:
        type: integer
      position_y:
        type: integer
    type: object
  ek_discussion_logic_service.UpdateMultipleActionsSwag:
    properties:
      actions:
        items:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateAction'
        type: array
    required:
    - actions
    type: object
  ek_discussion_logic_service.UpdateStepPositionSwag:
    properties:
      x:
        type: integer
      "y":
        type: integer
    required:
    - x
    - "y"
    type: object
  ek_entity_service.City:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_entity_service.ConfirmEntityDraftSwag:
    properties:
      comment:
        type: string
      entity_id:
        type: string
      status_id:
        type: string
    required:
    - comment
    - entity_id
    - status_id
    type: object
  ek_entity_service.CreateUpdateEntitySwag:
    properties:
      address:
        type: string
      city:
        $ref: '#/definitions/ek_entity_service.City'
        type: object
      district:
        $ref: '#/definitions/ek_entity_service.District'
        type: object
      entity_files:
        items:
          type: string
        type: array
      entity_gallery:
        items:
          type: string
        type: array
      entity_properties:
        items:
          $ref: '#/definitions/ek_entity_service.EntityProperty'
        type: array
      entity_type_code:
        description: KadastrNumber    string            `json:"kadastr_number" binding:"required"  example:"123456781234"`
        example: 1
        type: integer
      region:
        $ref: '#/definitions/ek_entity_service.Region'
        type: object
    required:
    - address
    - city
    - district
    - entity_files
    - entity_gallery
    - entity_properties
    - entity_type_code
    - region
    type: object
  ek_entity_service.District:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_entity_service.EntityDraftSwag:
    properties:
      city:
        $ref: '#/definitions/ek_entity_service.City'
        type: object
      comment:
        type: string
      district:
        $ref: '#/definitions/ek_entity_service.District'
        type: object
      entity_gallery:
        items:
          type: string
        type: array
      entity_id:
        type: string
      entity_properties:
        items:
          $ref: '#/definitions/ek_entity_service.EntityProperty'
        type: array
      region:
        $ref: '#/definitions/ek_entity_service.Region'
        type: object
    type: object
  ek_entity_service.EntityFilesSwag:
    properties:
      comment:
        type: string
    type: object
  ek_entity_service.EntityProperty:
    properties:
      property_id:
        type: string
      value:
        type: string
    type: object
  ek_entity_service.EntityTypeCode:
    properties:
      type_count:
        type: integer
      type_name:
        type: string
    type: object
  ek_entity_service.Entss:
    properties:
      _id:
        type: string
      status_count:
        type: integer
      status_name:
        type: string
    type: object
  ek_entity_service.GetAllEntitiesRequestSwag:
    properties:
      city_id:
        type: string
      entity_number:
        type: string
      entity_soato:
        type: string
      entity_type_code:
        type: integer
      from_date:
        example: "2021-11-21"
        type: string
      limit:
        type: integer
      page:
        type: integer
      region_id:
        type: string
      staff_id:
        type: string
      staff_soato:
        type: string
      status_id:
        type: string
      to_date:
        example: "2021-11-21"
        type: string
    type: object
  ek_entity_service.GetAllEntityDraftsRequestsSwag:
    properties:
      city_id:
        type: string
      date:
        type: string
      entity_draft_number:
        type: string
      from_date:
        example: "2021-11-21"
        type: string
      limit:
        type: integer
      page:
        type: integer
      region_id:
        type: string
      status_id:
        type: string
      to_date:
        example: "2021-11-21"
        type: string
    type: object
  ek_entity_service.GetAllEntityStatusCount:
    properties:
      get_all_entity_status:
        items:
          $ref: '#/definitions/ek_entity_service.Entss'
        type: array
    type: object
  ek_entity_service.GetEntityCountResponse:
    properties:
      auction_count:
        type: integer
      discussion_count:
        type: integer
      free_count:
        type: integer
      sold_count:
        type: integer
    type: object
  ek_entity_service.GetEntityTypeCod:
    properties:
      get_type_code:
        items:
          $ref: '#/definitions/ek_entity_service.EntityTypeCode'
        type: array
    type: object
  ek_entity_service.GetProperties:
    properties:
      order:
        type: integer
      property_id:
        type: string
    type: object
  ek_entity_service.GroupPropertySwag:
    properties:
      description:
        example: I have no idea
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/ek_entity_service.OrganizationGet'
        type: object
      properties:
        items:
          $ref: '#/definitions/ek_entity_service.GetProperties'
        type: array
      read_statuses:
        example:
        - 60dd9c0a4472a2aaa970304e
        items:
          type: string
        type: array
      status:
        type: boolean
      step:
        type: integer
      type:
        type: integer
      write_statuses:
        example:
        - 60dd9c1a729317449b1ada03
        items:
          type: string
        type: array
    required:
    - description
    - name
    - properties
    - read_statuses
    - status
    - step
    - type
    - write_statuses
    type: object
  ek_entity_service.OrganizationGet:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  ek_entity_service.PropertyOption:
    properties:
      name:
        example: Option
        type: string
      value:
        type: string
    required:
    - name
    - value
    type: object
  ek_entity_service.PropertySwag:
    properties:
      collection_name:
        type: string
      description:
        example: This is description for property
        type: string
      is_required:
        example: false
        type: boolean
      label:
        example: Doe
        type: string
      name:
        type: string
      placeholder:
        example: Doe
        type: string
      property_options:
        items:
          $ref: '#/definitions/ek_entity_service.PropertyOption'
        type: array
      status:
        example: true
        type: boolean
      type:
        example: radio
        type: string
      validation:
        example: This is required
        type: string
      with_confirmation:
        example: true
        type: boolean
    required:
    - description
    - is_required
    - label
    - name
    - placeholder
    - property_options
    - status
    - type
    - validation
    - with_confirmation
    type: object
  ek_entity_service.Region:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_entity_service.RevertEntityStatus:
    properties:
      action_id:
        type: string
      revert_comment:
        type: string
    type: object
  ek_entity_service.Status:
    properties:
      code:
        type: string
      color:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      parent_status_id:
        type: string
      ru_name:
        type: string
      type_code:
        type: integer
    type: object
  ek_entity_service.StatusSwag:
    properties:
      code:
        type: string
      color:
        example: blue
        type: string
      description:
        example: Description
        type: string
      is_active:
        type: boolean
      name:
        example: hokimiyat_accepted
        type: string
      parent_status_id:
        example: 60d6da512c29bfd27ba95a67
        type: string
      ru_name:
        type: string
      type_code:
        type: integer
    type: object
  ek_entity_service.UpdateEntityDraftPropertySwag:
    properties:
      entity_properties:
        items:
          $ref: '#/definitions/ek_entity_service.EntityProperty'
        type: array
    required:
    - entity_properties
    type: object
  ek_entity_service.UpdateEntityDraftStatus:
    properties:
      entity_draft_id:
        type: string
      status_id:
        type: string
    type: object
  ek_entity_service.UpdateEntityStatus:
    properties:
      entity_id:
        type: string
      status_id:
        type: string
    type: object
  ek_entity_service.UpdateWithActionIDEntitySwag:
    properties:
      action_description:
        type: string
      action_type:
        type: string
      deadline:
        type: integer
      entity_files:
        items:
          type: string
        type: array
      entity_gallery:
        items:
          type: string
        type: array
      entity_properties:
        items:
          $ref: '#/definitions/ek_entity_service.EntityProperty'
        type: array
      organizations:
        additionalProperties:
          type: boolean
        type: object
      status_id:
        type: string
    required:
    - action_description
    - action_type
    - deadline
    - entity_files
    - entity_gallery
    - entity_properties
    - status_id
    type: object
  ek_geo_service.GeoServiceRequest:
    properties:
      file_id:
        type: string
    type: object
  ek_geo_service.GeoServiceResponse:
    properties:
      geometry:
        $ref: '#/definitions/ek_geo_service.Geometry2'
        type: object
      type:
        type: string
    type: object
  ek_geo_service.Geometry2:
    properties:
      coordinates:
        type: string
      type:
        type: string
    type: object
  ek_integration_service.CheckOrderStatusResponse:
    properties:
      entity_id:
        type: string
      progress:
        type: string
      status_id:
        type: string
    type: object
  ek_setting_service.City:
    properties:
      code:
        type: integer
      external_id:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_setting_service.CreateAnnouncementSwag:
    properties:
      active_time:
        type: string
      announcement:
        type: string
      status:
        type: boolean
      type:
        type: string
    type: object
  ek_setting_service.CreateGlobalActionSwag:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  ek_setting_service.CreateGlobalEntityTypeSwag:
    properties:
      code:
        type: integer
      description:
        type: string
      name:
        type: string
    type: object
  ek_setting_service.CreateUpdateCategorySwag:
    properties:
      code:
        type: integer
      external_id:
        type: integer
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    required:
    - code
    - name
    - ru_name
    type: object
  ek_setting_service.CreateUpdateCitySwag:
    properties:
      code:
        type: integer
      external_id:
        type: integer
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    required:
    - code
    - name
    - ru_name
    type: object
  ek_setting_service.CreateUpdateConstructionTypeSwag:
    properties:
      name:
        example: example
        type: string
      parent_id:
        example: objectid
        type: string
      ru_name:
        example: node
        type: string
    required:
    - name
    - ru_name
    type: object
  ek_setting_service.CreateUpdateDistrictSwag:
    properties:
      city_id:
        type: string
      code:
        type: integer
      external_id:
        type: integer
      name:
        type: string
      region_id:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_setting_service.CreateUpdateProductSwag:
    properties:
      category_id:
        type: string
      description:
        type: string
      discount_amount:
        type: integer
      from_time:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      owner_id:
        type: string
      price_after:
        type: integer
      price_before:
        type: integer
      to_time:
        type: string
      url:
        type: string
    type: object
  ek_setting_service.CreateUpdateRegionSwag:
    properties:
      city_id:
        type: string
      code:
        type: integer
      external_id:
        type: integer
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    required:
    - city_id
    - code
    - name
    - ru_name
    - soato
    type: object
  ek_setting_service.CreateUpdateUserSwag:
    properties:
      id:
        type: string
      image_url:
        type: string
      link:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  ek_setting_service.Features:
    properties:
      geometry:
        $ref: '#/definitions/ek_setting_service.Geometry'
        type: object
      properties:
        $ref: '#/definitions/ek_setting_service.Property'
        type: object
    type: object
  ek_setting_service.Geometry:
    properties:
      coordinates:
        type: string
      type:
        type: string
    type: object
  ek_setting_service.GetAllRegionFilesResponse:
    properties:
      count:
        type: integer
      files:
        items:
          $ref: '#/definitions/ek_setting_service.RegionFiles'
        type: array
    type: object
  ek_setting_service.GisData:
    properties:
      features:
        items:
          $ref: '#/definitions/ek_setting_service.Features'
        type: array
    type: object
  ek_setting_service.Property:
    properties:
      district:
        type: string
      ending_date:
        type: string
      firm:
        type: string
      kml_folder:
        type: string
      name:
        type: string
      num_gorny:
        type: string
      raw:
        type: string
      receive_date:
        type: string
      region:
        type: string
      title_u:
        type: string
    type: object
  ek_setting_service.Region:
    properties:
      city:
        $ref: '#/definitions/ek_setting_service.City'
        type: object
      code:
        type: integer
      external_id:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_setting_service.RegionFiles:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      file_name:
        type: string
      id:
        type: string
      region:
        $ref: '#/definitions/ek_setting_service.Region'
        type: object
      type:
        type: string
      updatedAt:
        type: string
      url:
        type: string
      user:
        type: string
    type: object
  ek_setting_service.RegionFilesSwag:
    properties:
      comment:
        type: string
      file_name:
        type: string
      region_id:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  ek_setting_service.UpdateDistrictCostSwag:
    properties:
      cost_per_square:
        type: number
      cost_start_date:
        type: string
    type: object
  ek_setting_service.UpdateDistrictTaxSwag:
    properties:
      tax_per_square:
        type: number
      tax_start_date:
        type: string
    type: object
  ek_user_service.City:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_user_service.CreateUpdateApplicantSwag:
    properties:
      applicant_type:
        type: string
      birth_date:
        type: string
      birth_place:
        type: string
      citizenship:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      gender:
        type: string
      inn:
        type: string
      last_name:
        type: string
      login:
        type: string
      middle_name:
        type: string
      nationality:
        type: string
      passport_expiry_date:
        type: string
      passport_issue_date:
        type: string
      passport_issue_place:
        type: string
      passport_number:
        type: string
      permanent_address:
        type: string
      phone_number:
        type: string
      pin:
        type: string
      user_type:
        example: applicant
        type: string
    type: object
  ek_user_service.CreateUpdateOrganizationSwag:
    properties:
      code:
        type: integer
      description:
        type: string
      full_name:
        type: string
      name:
        type: string
      status:
        type: boolean
    required:
    - code
    - description
    - full_name
    - name
    - status
    type: object
  ek_user_service.CreateUpdatePermissionSwag:
    properties:
      description:
        type: string
      name:
        type: string
      ru_name:
        type: string
    required:
    - name
    - ru_name
    type: object
  ek_user_service.CreateUpdateRoleSwag:
    properties:
      code:
        type: integer
      description:
        type: string
      name:
        type: string
      organization_id:
        type: string
      permissions:
        items:
          type: string
        type: array
      status:
        description: ExternalID     int32    `json:"external_id" bson:"external_id"`
        type: boolean
    required:
    - name
    type: object
  ek_user_service.CreateUpdateStaffSwag:
    properties:
      address:
        type: string
      city:
        $ref: '#/definitions/ek_user_service.City'
        type: object
      email:
        type: string
      extra_info:
        type: string
      first_name:
        type: string
      inn:
        type: integer
      last_name:
        type: string
      login:
        type: string
      middle_name:
        type: string
      organization_id:
        type: string
      passport_issue_date:
        type: string
      passport_issue_place:
        type: string
      passport_number:
        type: string
      password:
        type: string
      phone_number:
        type: string
      pinfl:
        type: string
      region:
        $ref: '#/definitions/ek_user_service.Region'
        type: object
      role_id:
        type: string
      status:
        type: boolean
    type: object
  ek_user_service.GetActionHistoryByEntityIDSwag:
    properties:
      entity_id:
        type: string
    required:
    - entity_id
    type: object
  ek_user_service.GetAllApplicantsRequestSwag:
    properties:
      full_name:
        type: string
      limit:
        type: integer
      page:
        type: integer
      passport_number:
        type: string
      phone_number:
        type: string
      pinfl:
        type: string
      user_type:
        type: string
    type: object
  ek_user_service.GetAllStaffsRequestSwag:
    properties:
      limit:
        type: integer
      organization_id:
        type: string
      page:
        type: integer
      phone_number:
        type: string
      role_id:
        type: string
      search_string:
        type: string
      soato:
        type: string
      status:
        type: boolean
    type: object
  ek_user_service.LoginExistsRequest:
    properties:
      login:
        type: string
    type: object
  ek_user_service.LoginExistsResponse:
    properties:
      exist:
        type: boolean
    type: object
  ek_user_service.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  ek_user_service.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      verified:
        type: boolean
    type: object
  ek_user_service.Region:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  ek_user_service.UpdatePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  ek_variables.CreateResponse:
    properties:
      id:
        type: string
    type: object
  ek_variables.EmptyResponse:
    type: object
  ek_variables.FailureResponse:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  ek_variables.GlobalActionTypes:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  ek_variables.GlobalEntityType:
    properties:
      code:
        type: integer
      name:
        type: string
    type: object
  ek_variables.GlobalTypesResponse:
    properties:
      global_entity_types:
        items:
          $ref: '#/definitions/ek_variables.GlobalEntityType'
        type: array
    type: object
  ek_variables.SuccessResponse:
    properties:
      success:
        example: true
        type: boolean
    type: object
  entity_service.ApplicantEntity:
    properties:
      name:
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    type: object
  entity_service.ApplicantEntityDraft:
    properties:
      name:
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    type: object
  entity_service.Draft:
    properties:
      applicant:
        $ref: '#/definitions/entity_service.ApplicantEntityDraft'
        type: object
      city:
        $ref: '#/definitions/entity_service.EntityCity'
        type: object
      comment:
        type: string
      created_at:
        type: string
      district:
        $ref: '#/definitions/entity_service.EntityDistrict'
        type: object
      entity_number:
        type: integer
      entity_soato:
        type: string
      id:
        type: string
      region:
        $ref: '#/definitions/entity_service.EntityRegion'
        type: object
      status:
        $ref: '#/definitions/entity_service.Status'
        type: object
      updated_at:
        type: string
    type: object
  entity_service.Entity:
    properties:
      address:
        type: string
      city:
        $ref: '#/definitions/entity_service.EntityCity'
        type: object
      created_at:
        type: string
      district:
        $ref: '#/definitions/entity_service.EntityDistrict'
        type: object
      entity_files:
        items:
          type: string
        type: array
      entity_number:
        type: string
      entity_properties:
        items:
          $ref: '#/definitions/entity_service.GetEntityProperty'
        type: array
      entity_soato:
        type: string
      entity_type_code:
        type: integer
      id:
        type: string
      region:
        $ref: '#/definitions/entity_service.EntityRegion'
        type: object
      registration_date:
        type: string
      status:
        $ref: '#/definitions/entity_service.Status'
        type: object
      updated_at:
        type: string
    type: object
  entity_service.EntityCity:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  entity_service.EntityDistrict:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  entity_service.EntityDraft:
    properties:
      applicant:
        $ref: '#/definitions/entity_service.ApplicantEntity'
        type: object
      city:
        $ref: '#/definitions/entity_service.EntityCity'
        type: object
      comment:
        type: string
      created_at:
        type: string
      district:
        $ref: '#/definitions/entity_service.EntityDistrict'
        type: object
      entity:
        $ref: '#/definitions/entity_service.Entity'
        type: object
      entity_draft_number:
        type: string
      entity_draft_soato:
        type: string
      entity_gallery:
        items:
          type: string
        type: array
      entity_id:
        type: string
      entity_properties:
        items:
          $ref: '#/definitions/entity_service.GetEntityProperty'
        type: array
      id:
        type: string
      region:
        $ref: '#/definitions/entity_service.EntityRegion'
        type: object
      status:
        $ref: '#/definitions/entity_service.Status'
        type: object
      updated_at:
        type: string
    type: object
  entity_service.EntityProperty:
    properties:
      property_id:
        type: string
      value:
        type: string
    type: object
  entity_service.EntityRegion:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  entity_service.GetAllEntities:
    properties:
      address:
        type: string
      city:
        $ref: '#/definitions/entity_service.EntityCity'
        type: object
      created_at:
        type: string
      district:
        $ref: '#/definitions/entity_service.EntityDistrict'
        type: object
      entity_files:
        items:
          type: string
        type: array
      entity_gallery:
        items:
          type: string
        type: array
      entity_number:
        type: string
      entity_properties:
        items:
          $ref: '#/definitions/entity_service.EntityProperty'
        type: array
      entity_soato:
        type: string
      entity_status_update:
        type: string
      entity_type_code:
        type: integer
      id:
        type: string
      region:
        $ref: '#/definitions/entity_service.EntityRegion'
        type: object
      registration_date:
        type: string
      status:
        $ref: '#/definitions/entity_service.Status'
        type: object
      updated_at:
        type: string
      version:
        type: integer
    type: object
  entity_service.GetAllEntitiesResponse:
    properties:
      count:
        type: integer
      entities:
        items:
          $ref: '#/definitions/entity_service.GetAllEntities'
        type: array
    type: object
  entity_service.GetAllEntityDrafts:
    properties:
      applicant:
        $ref: '#/definitions/entity_service.ApplicantEntity'
        type: object
      city:
        $ref: '#/definitions/entity_service.EntityCity'
        type: object
      comment:
        type: string
      created_at:
        type: string
      district:
        $ref: '#/definitions/entity_service.EntityDistrict'
        type: object
      entity:
        $ref: '#/definitions/entity_service.Entity'
        type: object
      entity_draft_number:
        type: string
      entity_draft_soato:
        type: string
      entity_gallery:
        items:
          type: string
        type: array
      entity_id:
        type: string
      entity_properties:
        items:
          $ref: '#/definitions/entity_service.EntityProperty'
        type: array
      id:
        type: string
      region:
        $ref: '#/definitions/entity_service.EntityRegion'
        type: object
      status:
        $ref: '#/definitions/entity_service.Status'
        type: object
      updated_at:
        type: string
    type: object
  entity_service.GetAllEntityDraftsResponse:
    properties:
      count:
        type: integer
      entity_drafts:
        items:
          $ref: '#/definitions/entity_service.GetAllEntityDrafts'
        type: array
    type: object
  entity_service.GetAllGroupPropertiesByTypeResponse:
    properties:
      count:
        type: integer
      group_properties:
        items:
          $ref: '#/definitions/entity_service.GroupProperty'
        type: array
    type: object
  entity_service.GetAllGroupPropertiesResponse:
    properties:
      count:
        type: integer
      group_properties:
        items:
          $ref: '#/definitions/entity_service.GetAllGroupProperty'
        type: array
    type: object
  entity_service.GetAllGroupProperty:
    properties:
      category:
        type: integer
      description:
        type: string
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/entity_service.OrganizationModel'
        type: object
      properties:
        items:
          $ref: '#/definitions/entity_service.GetProperties'
        type: array
      read_statuses:
        items:
          type: string
        type: array
      status:
        type: boolean
      step:
        type: integer
      type:
        type: integer
      write_statuses:
        items:
          type: string
        type: array
    type: object
  entity_service.GetAllGroupPropertyByStatusID:
    properties:
      category:
        type: integer
      description:
        type: string
      id:
        type: string
      is_disable:
        type: boolean
      name:
        type: string
      organization:
        $ref: '#/definitions/entity_service.OrganizationModel'
        type: object
      properties:
        items:
          $ref: '#/definitions/entity_service.Property'
        type: array
      status:
        type: boolean
      step:
        type: integer
      type:
        type: integer
    type: object
  entity_service.GetAllGroupPropertyByStatusIdResponse:
    properties:
      group_properties:
        items:
          $ref: '#/definitions/entity_service.GetAllGroupPropertyByStatusID'
        type: array
    type: object
  entity_service.GetAllPropertiesResponse:
    properties:
      count:
        type: integer
      properties:
        items:
          $ref: '#/definitions/entity_service.Property'
        type: array
    type: object
  entity_service.GetAllStatusesResponse:
    properties:
      count:
        type: integer
      statuses:
        items:
          $ref: '#/definitions/entity_service.Status'
        type: array
    type: object
  entity_service.GetCollection:
    properties:
      children:
        items:
          $ref: '#/definitions/entity_service.GetCollection'
        type: array
      label:
        type: string
      value:
        type: string
    type: object
  entity_service.GetCollectionResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/entity_service.GetCollection'
        type: array
    type: object
  entity_service.GetEntity:
    properties:
      address:
        type: string
      city:
        $ref: '#/definitions/entity_service.EntityCity'
        type: object
      created_at:
        type: string
      deadline:
        type: string
      district:
        $ref: '#/definitions/entity_service.EntityDistrict'
        type: object
      entity_drafts:
        items:
          $ref: '#/definitions/entity_service.Draft'
        type: array
      entity_files:
        items:
          type: string
        type: array
      entity_gallery:
        items:
          type: string
        type: array
      entity_number:
        type: string
      entity_properties:
        items:
          $ref: '#/definitions/entity_service.GetEntityProperty'
        type: array
      entity_soato:
        type: string
      entity_status_update:
        type: string
      entity_type_code:
        type: integer
      id:
        type: string
      organizations:
        additionalProperties:
          type: boolean
        type: object
      region:
        $ref: '#/definitions/entity_service.EntityRegion'
        type: object
      registration_date:
        type: string
      revert_comment:
        type: string
      status:
        $ref: '#/definitions/entity_service.Status'
        type: object
      updated_at:
        type: string
      version:
        type: integer
    type: object
  entity_service.GetEntityProperty:
    properties:
      property:
        $ref: '#/definitions/entity_service.GetProperty'
        type: object
      value:
        type: string
    type: object
  entity_service.GetProperties:
    properties:
      order:
        type: integer
      property_id:
        type: string
    type: object
  entity_service.GetProperty:
    properties:
      collection_name:
        type: string
      description:
        type: string
      id:
        type: string
      is_required:
        type: boolean
      label:
        type: string
      name:
        type: string
      placeholder:
        type: string
      property_options:
        items:
          $ref: '#/definitions/entity_service.PropertyOption'
        type: array
      status:
        type: boolean
      type:
        type: string
      validation:
        type: string
      with_confirmation:
        type: boolean
    type: object
  entity_service.GroupProperty:
    properties:
      category:
        type: integer
      description:
        type: string
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/entity_service.OrganizationModel'
        type: object
      properties:
        items:
          $ref: '#/definitions/entity_service.Property'
        type: array
      read_statuses:
        items:
          $ref: '#/definitions/entity_service.Status'
        type: array
      status:
        type: boolean
      step:
        type: integer
      type:
        type: integer
      write_statuses:
        items:
          $ref: '#/definitions/entity_service.Status'
        type: array
    type: object
  entity_service.OrganizationModel:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  entity_service.Property:
    properties:
      collection_name:
        type: string
      description:
        type: string
      id:
        type: string
      is_required:
        type: boolean
      label:
        type: string
      name:
        type: string
      placeholder:
        type: string
      property_options:
        items:
          $ref: '#/definitions/entity_service.PropertyOption'
        type: array
      status:
        type: boolean
      type:
        type: string
      validation:
        type: string
      with_confirmation:
        type: boolean
    type: object
  entity_service.PropertyOption:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  entity_service.Status:
    properties:
      code:
        type: string
      color:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      parent_status_id:
        type: string
      ru_name:
        type: string
      type_code:
        type: integer
      updated_at:
        type: string
    type: object
  setting_service.Announcement:
    properties:
      active_time:
        type: string
      announcement:
        type: string
      created_at:
        type: string
      id:
        type: string
      status:
        type: boolean
      type:
        type: string
      updated_at:
        type: string
    type: object
  setting_service.Category:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  setting_service.City:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  setting_service.ConstructionType:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      parent_id:
        type: string
      ru_name:
        type: string
      updated_at:
        type: string
    type: object
  setting_service.CreatedResponse:
    properties:
      id:
        type: string
    type: object
  setting_service.District:
    properties:
      city:
        $ref: '#/definitions/setting_service.City'
        type: object
      code:
        type: integer
      cost:
        $ref: '#/definitions/setting_service.DistrictCost'
        type: object
      id:
        type: string
      name:
        type: string
      region:
        $ref: '#/definitions/setting_service.Region'
        type: object
      ru_name:
        type: string
      soato:
        type: integer
      tax:
        $ref: '#/definitions/setting_service.DistrictTax'
        type: object
    type: object
  setting_service.DistrictCost:
    properties:
      cost_per_square:
        type: number
      cost_start_date:
        type: string
    type: object
  setting_service.DistrictTax:
    properties:
      tax_per_square:
        type: number
      tax_start_date:
        type: string
    type: object
  setting_service.GetAllAnnouncementsResponse:
    properties:
      announcements:
        items:
          $ref: '#/definitions/setting_service.Announcement'
        type: array
      count:
        type: integer
    type: object
  setting_service.GetAllCategoriesResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/setting_service.Category'
        type: array
      count:
        type: integer
    type: object
  setting_service.GetAllCitiesResponse:
    properties:
      cities:
        items:
          $ref: '#/definitions/setting_service.City'
        type: array
      count:
        type: integer
    type: object
  setting_service.GetAllConstructionTypesResponse:
    properties:
      construction_types:
        items:
          $ref: '#/definitions/setting_service.ConstructionType'
        type: array
      count:
        type: integer
    type: object
  setting_service.GetAllDistrictsResponse:
    properties:
      count:
        type: integer
      districts:
        items:
          $ref: '#/definitions/setting_service.District'
        type: array
    type: object
  setting_service.GetAllProductsResponse:
    properties:
      count:
        type: integer
      products:
        items:
          $ref: '#/definitions/setting_service.Product'
        type: array
    type: object
  setting_service.GetAllRegionsResponse:
    properties:
      count:
        type: integer
      regions:
        items:
          $ref: '#/definitions/setting_service.Region'
        type: array
    type: object
  setting_service.GetAllUsersResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/setting_service.User'
        type: array
    type: object
  setting_service.GlobalSetting:
    properties:
      construction_cost:
        type: integer
      land_tax_juridical:
        type: integer
      land_tax_physical:
        type: integer
      minimum_wage:
        type: integer
      type:
        type: string
    type: object
  setting_service.Product:
    properties:
      category:
        $ref: '#/definitions/setting_service.Category'
        type: object
      description:
        type: string
      discount_amount:
        type: integer
      from_time:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      owner:
        $ref: '#/definitions/setting_service.User'
        type: object
      price_after:
        type: integer
      price_before:
        type: integer
      to_time:
        type: string
      url:
        type: string
    type: object
  setting_service.Region:
    properties:
      city:
        $ref: '#/definitions/setting_service.City'
        type: object
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  setting_service.User:
    properties:
      id:
        type: string
      image_url:
        type: string
      link:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  setting_service.UserExistsResponse:
    properties:
      exist:
        type: boolean
      id:
        type: string
    type: object
  user_service.ActionHistory:
    properties:
      action:
        type: string
      created_at:
        type: string
      entity_id:
        type: string
      entity_name:
        type: string
      id:
        type: string
      updated_fields:
        items:
          $ref: '#/definitions/user_service.UpdatedFields'
        type: array
      user_id:
        type: string
    type: object
  user_service.Applicant:
    properties:
      applicant_type:
        type: string
      birth_date:
        type: string
      birth_place:
        type: string
      citizenship:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      inn:
        type: string
      last_name:
        type: string
      login:
        type: string
      middle_name:
        type: string
      nationality:
        type: string
      passport_expiry_date:
        type: string
      passport_issue_date:
        type: string
      passport_issue_place:
        type: string
      passport_number:
        type: string
      password:
        type: string
      permanent_address:
        type: string
      phone_number:
        type: string
      pin:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
    type: object
  user_service.CreateResponse:
    properties:
      id:
        type: string
    type: object
  user_service.GetAllActionHistoriesResponse:
    properties:
      action_histories:
        items:
          $ref: '#/definitions/user_service.ActionHistory'
        type: array
      count:
        type: integer
    type: object
  user_service.GetAllApplicantsResponse:
    properties:
      applicants:
        items:
          $ref: '#/definitions/user_service.Applicant'
        type: array
      count:
        type: integer
    type: object
  user_service.GetAllOrganizationsResponse:
    properties:
      count:
        type: integer
      organizations:
        items:
          $ref: '#/definitions/user_service.Organization'
        type: array
    type: object
  user_service.GetAllRolesResponse:
    properties:
      count:
        type: integer
      roles:
        items:
          $ref: '#/definitions/user_service.Role'
        type: array
    type: object
  user_service.GetAllStaffsResponse:
    properties:
      count:
        type: integer
      staffs:
        items:
          $ref: '#/definitions/user_service.Staff'
        type: array
    type: object
  user_service.GetRole:
    properties:
      code:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
      updated_at:
        type: string
    type: object
  user_service.Organization:
    properties:
      code:
        type: integer
      created_at:
        type: string
      description:
        type: string
      external_id:
        type: integer
      full_name:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: boolean
      updated_at:
        type: string
    type: object
  user_service.Permission:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
    type: object
  user_service.Role:
    properties:
      code:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/user_service.Organization'
        type: object
      permissions:
        items:
          $ref: '#/definitions/user_service.Permission'
        type: array
      status:
        type: boolean
      updated_at:
        type: string
    type: object
  user_service.Staff:
    properties:
      address:
        type: string
      city:
        $ref: '#/definitions/user_service.StaffCity'
        type: object
      created_at:
        type: string
      email:
        type: string
      external_id:
        type: integer
      first_name:
        type: string
      id:
        type: string
      inn:
        type: integer
      last_name:
        type: string
      login:
        type: string
      middle_name:
        type: string
      organization:
        $ref: '#/definitions/user_service.Organization'
        type: object
      passport_issue_date:
        type: string
      passport_issue_place:
        type: string
      passport_number:
        type: string
      password:
        type: string
      phone_number:
        type: string
      pinfl:
        type: string
      policy:
        type: integer
      region:
        $ref: '#/definitions/user_service.StaffRegion'
        type: object
      role:
        $ref: '#/definitions/user_service.GetRole'
        type: object
      soato:
        type: string
      status:
        type: boolean
      unique_name:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
      verified:
        type: boolean
    type: object
  user_service.StaffCity:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  user_service.StaffRegion:
    properties:
      code:
        type: integer
      id:
        type: string
      name:
        type: string
      ru_name:
        type: string
      soato:
        type: integer
    type: object
  user_service.UpdatedFields:
    properties:
      name_of_field:
        type: string
      new_value:
        type: string
      old_value:
        type: string
    type: object
  v1.FilesResponse:
    properties:
      file_path:
        type: string
      file_url:
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /v1/action:
    post:
      consumes:
      - application/json
      description: API for creating action
      parameters:
      - description: action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateAction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create Action
      tags:
      - action
  /v1/action-history:
    get:
      consumes:
      - application/json
      description: API for getting all action history
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllActionHistoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Action Histories
      tags:
      - action-history
  /v1/action-history-entity/{entity_id}:
    get:
      consumes:
      - application/json
      description: API for getting all entity action history
      parameters:
      - description: entity_id
        in: path
        name: entity_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_user_service.GetActionHistoryByEntityIDSwag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Entity Action Histories
      tags:
      - action-history
  /v1/action-history-staffs/{staff_id}:
    get:
      consumes:
      - application/json
      description: API for getting last 20 action history by staff id
      parameters:
      - description: staff_id
        in: path
        name: staff_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllActionHistoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting last 20 Action Histories by staff id
      tags:
      - action-history
  /v1/action-history/{action_history_id}:
    get:
      consumes:
      - application/json
      description: API for getting action history
      parameters:
      - description: action_history_id
        in: path
        name: action_history_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.ActionHistory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Action History
      tags:
      - action-history
  /v1/action-parallel:
    patch:
      consumes:
      - application/json
      - application/json
      description: API is to create action action relation action-> ACTION_SENDS_PARALLEL
        -> action
      parameters:
      - description: action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateActionSendsParallelRequestSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.ActionSendsStepRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create action action relation action-> ACTION_SENDS_PARALLEL -> action
      tags:
      - action
  /v1/action-step:
    patch:
      consumes:
      - application/json
      - application/json
      description: API is to create action action relation action-> ACTION_SENDS_STEP
        -> action
      parameters:
      - description: action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateActionSendsStepRequestSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.ActionSendsStepRelationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create action action relation action-> ACTION_SENDS_STEP -> action
      tags:
      - action
  /v1/action/{action_id}:
    put:
      consumes:
      - application/json
      - application/json
      description: API for updating action
      parameters:
      - description: action_id
        in: path
        name: action_id
        required: true
        type: string
      - description: action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateAction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Action
      tags:
      - action
  /v1/actions:
    put:
      consumes:
      - application/json
      - application/json
      description: API for updating multiple action
      parameters:
      - description: action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateMultipleActionsSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update multiple action
      tags:
      - action
  /v1/announcement:
    get:
      consumes:
      - application/json
      description: API for getting all announcementes
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllAnnouncementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All announcementes
      tags:
      - announcement
    post:
      consumes:
      - application/json
      description: API for creating announcement
      parameters:
      - description: Announcement
        in: body
        name: announcement
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateAnnouncementSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create announcement
      tags:
      - announcement
  /v1/announcement/{announcement_id}:
    get:
      consumes:
      - application/json
      description: API for getting announcement
      parameters:
      - description: announcement_id
        in: path
        name: announcement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.Announcement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Announcement
      tags:
      - announcement
    put:
      consumes:
      - application/json
      description: API for updating announcement
      parameters:
      - description: announcement_id
        in: path
        name: announcement_id
        required: true
        type: string
      - description: announcement
        in: body
        name: announcement
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateAnnouncementSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update announcement
      tags:
      - announcement
  /v1/applicant:
    get:
      consumes:
      - application/json
      description: API for getting all applicants
      parameters:
      - in: query
        name: full_name
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: passport_number
        type: string
      - in: query
        name: phone_number
        type: string
      - in: query
        name: pinfl
        type: string
      - in: query
        name: user_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllApplicantsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Applicants
      tags:
      - applicant
    post:
      consumes:
      - application/json
      description: API for creating applicant
      parameters:
      - description: applicant
        in: body
        name: applicant
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateApplicantSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user_service.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create applicant
      tags:
      - applicant
  /v1/applicant-by-token:
    get:
      consumes:
      - application/json
      description: API for getting applicant by token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Applicant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Applicant by token
      tags:
      - applicant
  /v1/applicant-entity-draft/{user_id}:
    get:
      consumes:
      - application/json
      description: API for getting all entity drafts by user id
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntityDraftsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Getting All draft entities by user id
      tags:
      - entity-draft
  /v1/applicant/{applicant_id}:
    get:
      consumes:
      - application/json
      description: API for getting applicant
      parameters:
      - description: applicant_id
        in: path
        name: applicant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Applicant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Applicant
      tags:
      - applicant
    put:
      consumes:
      - application/json
      description: API for updating applicant
      parameters:
      - description: applicant_id
        in: path
        name: applicant_id
        required: true
        type: string
      - description: applicant
        in: body
        name: applicant
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateApplicantSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Applicant
      tags:
      - applicant
  /v1/applicant/one-id/{code}:
    get:
      consumes:
      - application/json
      description: API for get applicant one-id token
      parameters:
      - description: code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Applicant one-id token
      tags:
      - applicant
  /v1/business-process/{diagram_id}:
    get:
      consumes:
      - application/json
      description: API for getting business process
      parameters:
      - description: diagram_id
        in: path
        name: diagram_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.GetOneStep'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get business process
      tags:
      - business-process
  /v1/business-type:
    get:
      consumes:
      - application/json
      description: API for getting all Business Types
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.GetAllBusinessTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting Business Types
      tags:
      - business-type
    post:
      consumes:
      - application/json
      description: API for creating business_type
      parameters:
      - description: Business Type
        in: body
        name: business_type
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateBusinessTypeSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create business_type
      tags:
      - business-type
  /v1/business-type/{business_type_id}:
    put:
      consumes:
      - application/json
      description: API for updating Business Type
      parameters:
      - description: business_type_id
        in: path
        name: business_type_id
        required: true
        type: string
      - description: Business Type
        in: body
        name: Type
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateBusinessTypeSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Business Type
      tags:
      - business-type
  /v1/category:
    get:
      consumes:
      - application/json
      description: API for getting all categoryes
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: soato
        in: query
        name: soato
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllCategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All categories
      tags:
      - category
    post:
      consumes:
      - application/json
      description: API for creating category
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateCategorySwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create category
      tags:
      - category
  /v1/category/{category_id}:
    get:
      consumes:
      - application/json
      description: API for getting category
      parameters:
      - description: category_id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Category
      tags:
      - category
    put:
      consumes:
      - application/json
      description: API for updating category
      parameters:
      - description: category_id
        in: path
        name: category_id
        required: true
        type: string
      - description: category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateCategorySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update category
      tags:
      - category
  /v1/check-orders:
    get:
      consumes:
      - application/json
      description: Check order status
      parameters:
      - description: 615ab2cf8f371feaf769a533
        in: query
        name: entity_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_integration_service.CheckOrderStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Check order status
      tags:
      - auction-order
  /v1/city:
    get:
      consumes:
      - application/json
      description: API for getting all cityes
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: soato
        in: query
        name: soato
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllCitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All cities
      tags:
      - city
    post:
      consumes:
      - application/json
      description: API for creating city
      parameters:
      - description: City
        in: body
        name: city
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateCitySwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create city
      tags:
      - city
  /v1/city/{city_id}:
    get:
      consumes:
      - application/json
      description: API for getting city
      parameters:
      - description: city_id
        in: path
        name: city_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.City'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get City
      tags:
      - city
    put:
      consumes:
      - application/json
      description: API for updating city
      parameters:
      - description: city_id
        in: path
        name: city_id
        required: true
        type: string
      - description: city
        in: body
        name: city
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateCitySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update city
      tags:
      - city
  /v1/construction-type:
    get:
      consumes:
      - application/json
      description: API for getting all ConstructionType
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllConstructionTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All ConstructionType
      tags:
      - construction-type
    post:
      consumes:
      - application/json
      description: API for creating constructionType
      parameters:
      - description: construction_type
        in: body
        name: constructionType
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateConstructionTypeSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create constructionType
      tags:
      - construction-type
  /v1/construction-type/{construction_type_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: construction_type_id
        in: path
        name: construction_type_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.ConstructionType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get constructionType
      tags:
      - construction-type
    put:
      consumes:
      - application/json
      description: API for updating construction-type
      parameters:
      - description: construction_type_id
        in: path
        name: construction_type_id
        required: true
        type: string
      - description: construction_type
        in: body
        name: construction-type
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateConstructionTypeSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update construction-type
      tags:
      - construction-type
  /v1/dashboard-count-by-cities:
    get:
      consumes:
      - application/json
      description: API for getting all entity with properties
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All entity `with` properties
      tags:
      - dashboard
  /v1/dashboard-new-entities:
    get:
      consumes:
      - application/json
      description: API for getting all entity with properties
      parameters:
      - description: city_id
        in: query
        name: city_id
        type: string
      - description: region_id
        in: query
        name: region_id
        type: string
      - description: entity_number
        in: query
        name: entity_number
        type: string
      - description: status_id
        in: query
        name: status_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All entity `with` properties
      tags:
      - dashboard
  /v1/diagram:
    get:
      consumes:
      - application/json
      description: API for getting all diagrams
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: code
        in: query
        name: code
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.GetAllDiagramsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting diagrams
      tags:
      - diagram
    post:
      consumes:
      - application/json
      description: API for creating diagram
      parameters:
      - description: diagram
        in: body
        name: diagram
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateDiagramSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create diagram
      tags:
      - diagram
  /v1/diagram-relation-step:
    patch:
      consumes:
      - application/json
      description: API is to create diagrams diagram relation diagrams-> diagram_HAS_STEP
        -> step
      parameters:
      - description: applicant
        in: body
        name: diagram
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateDiagramStepRelationRequestSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create diagrams diagram relation diagrams-> diagram_HAS_STEP -> step
      tags:
      - diagram
  /v1/diagram-relation/{relation_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting relation
      parameters:
      - description: relation_id
        in: path
        name: relation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: delete relation
      tags:
      - diagram
  /v1/diagram/{diagram_id}:
    get:
      consumes:
      - application/json
      description: API for getting diagram
      parameters:
      - description: diagram_id
        in: path
        name: diagram_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.Diagram'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get diagram
      tags:
      - diagram
    put:
      consumes:
      - application/json
      description: API for updating diagram
      parameters:
      - description: diagram_id
        in: path
        name: diagram_id
        required: true
        type: string
      - description: diagram
        in: body
        name: diagram
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateDiagramSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update diagram
      tags:
      - diagram
  /v1/diagram/{node_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting node
      parameters:
      - description: node_id
        in: path
        name: node_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: delete node
      tags:
      - diagram
  /v1/district:
    get:
      consumes:
      - application/json
      description: API for getting all districtes
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: soato
        in: query
        name: soato
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllDistrictsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All districts
      tags:
      - district
    post:
      consumes:
      - application/json
      description: API for creating district
      parameters:
      - description: district
        in: body
        name: district
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateDistrictSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create district
      tags:
      - district
  /v1/district/{district_id}:
    get:
      consumes:
      - application/json
      description: API for getting district
      parameters:
      - description: district_id
        in: path
        name: district_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get district
      tags:
      - district
    patch:
      consumes:
      - application/json
      description: API for updating district cost
      parameters:
      - description: district_id
        in: path
        name: district_id
        required: true
        type: string
      - description: cost
        in: body
        name: cost
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.UpdateDistrictCostSwag'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update district cost
      tags:
      - district
    put:
      consumes:
      - application/json
      description: API for updating district
      parameters:
      - description: district_id
        in: path
        name: district_id
        required: true
        type: string
      - description: district
        in: body
        name: district
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateDistrictSwag'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update district
      tags:
      - district
  /v1/districts/{city_id}/{region_id}:
    get:
      consumes:
      - application/json
      description: API for getting all districts by region ID
      parameters:
      - description: city_id
        in: path
        name: city_id
        required: true
        type: string
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      - description: name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllDistrictsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All districts by region ID
      tags:
      - district
  /v1/entity:
    get:
      consumes:
      - application/json
      description: API for getting all entities
      parameters:
      - in: query
        name: city_id
        type: string
      - in: query
        name: entity_number
        type: string
      - in: query
        name: entity_soato
        type: string
      - in: query
        name: entity_type_code
        type: integer
      - example: "2021-11-21"
        in: query
        name: from_date
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: region_id
        type: string
      - in: query
        name: staff_id
        type: string
      - in: query
        name: staff_soato
        type: string
      - in: query
        name: status_id
        type: string
      - example: "2021-11-21"
        in: query
        name: to_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Getting All entities
      tags:
      - entity
    post:
      consumes:
      - application/json
      description: API for creating entity
      parameters:
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.CreateUpdateEntitySwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Create entity
      tags:
      - entity
  /v1/entity-collection:
    get:
      consumes:
      - application/json
      description: API for getting all entity collections
      parameters:
      - description: collection_name
        in: query
        name: collection_name
        required: true
        type: string
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetCollectionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All entity collections
      tags:
      - entity
  /v1/entity-count:
    get:
      consumes:
      - application/json
      description: API for getting entity count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_entity_service.GetEntityCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: get entity count
      tags:
      - entity
  /v1/entity-draft:
    get:
      consumes:
      - application/json
      description: API for getting all entity drafts
      parameters:
      - in: query
        name: city_id
        type: string
      - in: query
        name: date
        type: string
      - in: query
        name: entity_draft_number
        type: string
      - example: "2021-11-21"
        in: query
        name: from_date
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: region_id
        type: string
      - in: query
        name: status_id
        type: string
      - example: "2021-11-21"
        in: query
        name: to_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntityDraftsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Getting All draft entities
      tags:
      - entity-draft
    post:
      consumes:
      - application/json
      description: API for creating entity draft
      parameters:
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.EntityDraftSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Create entity draft
      tags:
      - entity-draft
  /v1/entity-draft-expired:
    get:
      consumes:
      - application/json
      description: API for getting expired entity drafts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntityDraftsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting expired draft entities
      tags:
      - entity-draft
  /v1/entity-draft-property/{entity_draft_id}:
    put:
      consumes:
      - application/json
      description: API for updating entity draft reject
      parameters:
      - description: entity_draft_id
        in: path
        name: entity_draft_id
        required: true
        type: string
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.UpdateEntityDraftPropertySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity draft reject
      tags:
      - entity-draft
  /v1/entity-draft-status:
    put:
      consumes:
      - application/json
      description: API for updating entity draft status
      parameters:
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.UpdateEntityDraftStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity draft status
      tags:
      - entity-draft
  /v1/entity-draft/{entity_draft_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting entity draft
      parameters:
      - description: entity_draft_id
        in: path
        name: entity_draft_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete entity draft
      tags:
      - entity-draft
    get:
      consumes:
      - application/json
      parameters:
      - description: entity_draft_id
        in: path
        name: entity_draft_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.EntityDraft'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get entity draft
      tags:
      - entity-draft
    patch:
      consumes:
      - application/json
      description: API for updating entity draft comment
      parameters:
      - description: entity_draft_id
        in: path
        name: entity_draft_id
        required: true
        type: string
      - description: entity-draft
        in: body
        name: entity-draft
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.ConfirmEntityDraftSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity draft comment
      tags:
      - entity-draft
    put:
      consumes:
      - application/json
      description: API for updating entity
      parameters:
      - description: entity_draft_id
        in: path
        name: entity_draft_id
        required: true
        type: string
      - description: entity-draft
        in: body
        name: entity-draft
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.EntityDraftSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity draft
      tags:
      - entity-draft
  /v1/entity-excel-report:
    get:
      consumes:
      - application/json
      description: API for getting excel
      parameters:
      - description: from_date
        in: query
        name: from_date
        required: true
        type: string
      - description: to_date
        in: query
        name: to_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting excel
      tags:
      - report
  /v1/entity-expired:
    get:
      consumes:
      - application/json
      description: API for getting expired entity
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: get expired entity
      tags:
      - entity
  /v1/entity-parent-status:
    put:
      consumes:
      - application/json
      description: API for updating entity with parent statuss
      parameters:
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.UpdateEntityStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity with parent status
      tags:
      - entity
  /v1/entity-properties:
    get:
      consumes:
      - application/json
      description: API for getting all entity with properties
      parameters:
      - description: city_id
        in: query
        name: city_id
        required: true
        type: string
      - description: region_id
        in: query
        name: region_id
        required: true
        type: string
      - description: entity_type_code
        in: query
        name: entity_type_code
        type: string
      - description: entity_number
        in: query
        name: entity_number
        type: string
      - description: status_id
        in: query
        name: status_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All entity `with` properties
      tags:
      - entity
  /v1/entity-staff/{staff_id}:
    get:
      consumes:
      - application/json
      description: API for getting all entities by staff id
      parameters:
      - description: staff_id
        in: path
        name: staff_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllEntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All entities by staff id
      tags:
      - entity
  /v1/entity-status-count:
    get:
      consumes:
      - application/json
      description: API for getting expired entity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_entity_service.GetAllEntityStatusCount'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: get expired entity
      tags:
      - entity-status-count
  /v1/entity-status-revert/{entity_id}:
    put:
      consumes:
      - application/json
      description: API for updating entity statuss
      parameters:
      - description: entity_id
        in: path
        name: entity_id
        required: true
        type: string
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.RevertEntityStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity status
      tags:
      - entity
  /v1/entity-status-update:
    put:
      consumes:
      - application/json
      description: API for updating entity status
      parameters:
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.UpdateEntityStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity status
      tags:
      - entity
  /v1/entity-status/{entity_id}:
    put:
      consumes:
      - application/json
      description: API for action-description <- action.description, status_id <-
        action.next_status_id and deadline <- action.deadline
      parameters:
      - description: entity_id
        in: path
        name: entity_id
        required: true
        type: string
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.UpdateWithActionIDEntitySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity status
      tags:
      - entity
  /v1/entity-type-count:
    get:
      consumes:
      - application/json
      description: API for getting expired entity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_entity_service.GetEntityTypeCod'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: get expired entity
      tags:
      - entity-type-count
  /v1/entity/{entity_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting entity
      parameters:
      - description: entity_id
        in: path
        name: entity_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete entity
      tags:
      - entity
    get:
      consumes:
      - application/json
      parameters:
      - description: entity_id
        in: path
        name: entity_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get entity
      tags:
      - entity
    put:
      consumes:
      - application/json
      description: API for updating entity
      parameters:
      - description: entity_id
        in: path
        name: entity_id
        required: true
        type: string
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.CreateUpdateEntitySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Update entity
      tags:
      - entity
  /v1/file-upload:
    post:
      consumes:
      - multipart/form-data
      - application/json
      description: API for creating file
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: region
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.EntityFilesSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.FilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create file
      tags:
      - file_upload
  /v1/finish:
    post:
      consumes:
      - application/json
      description: API for creating finish
      parameters:
      - description: finish
        in: body
        name: finish
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateFinishSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create finish
      tags:
      - finish
  /v1/finish-action:
    patch:
      consumes:
      - application/json
      description: API is to create finish action  relation action-> ACTION_SENDS_FINISH
        -> action
      parameters:
      - description: finish
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateFinishActionRelationRequestSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create finish action  relation action-> ACTION_SENDS_FINISH -> action
      tags:
      - finish
  /v1/finish/{finish_id}:
    put:
      consumes:
      - application/json
      description: API for updating finish
      parameters:
      - description: finish_id
        in: path
        name: finish_id
        required: true
        type: string
      - description: finish
        in: body
        name: finish
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateFinishSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Finish
      tags:
      - finish
  /v1/geo-service:
    post:
      consumes:
      - application/json
      description: API to geo-service
      parameters:
      - description: Geo service
        in: body
        name: geo-service
        required: true
        schema:
          $ref: '#/definitions/ek_geo_service.GeoServiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_geo_service.GeoServiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: geo-service
      tags:
      - geo-service
  /v1/gis:
    get:
      consumes:
      - application/json
      description: API for get GIS data
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_setting_service.GisData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: get GIS data
      tags:
      - gis
  /v1/global-action-types:
    get:
      consumes:
      - application/json
      description: API for getting global action types
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.GlobalActionTypes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All global action types
      tags:
      - global_types
    post:
      consumes:
      - application/json
      description: API for Creating global action
      parameters:
      - description: Action
        in: body
        name: Action
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateGlobalActionSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.GlobalTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Creating All global action
      tags:
      - global_types
  /v1/global-action-types/{id}:
    put:
      consumes:
      - application/json
      description: API for Creating global action types
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: action
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateGlobalActionSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.GlobalTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Creating All global action types
      tags:
      - global_types
  /v1/global-entity-types:
    get:
      consumes:
      - application/json
      description: API for getting global types
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.GlobalTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All global types
      tags:
      - global_types
    post:
      consumes:
      - application/json
      description: API for Creating global types
      parameters:
      - description: entity
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateGlobalEntityTypeSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.GlobalTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Creating All global types
      tags:
      - global_types
  /v1/global-entity-types/{id}:
    put:
      consumes:
      - application/json
      description: API for Creating global types
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: City
        in: body
        name: city
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateGlobalEntityTypeSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.GlobalTypesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Creating All global types
      tags:
      - global_types
  /v1/global-setting:
    get:
      consumes:
      - application/json
      description: API for getting global setting
      parameters:
      - description: type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GlobalSetting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get GlobalSetting
      tags:
      - global setting
    put:
      consumes:
      - application/json
      description: API for updating setting
      parameters:
      - description: type
        in: query
        name: type
        required: true
        type: string
      - description: setting
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/setting_service.GlobalSetting'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update setting
      tags:
      - global setting
  /v1/group-property:
    get:
      consumes:
      - application/json
      description: API for getting all group properties
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllGroupPropertiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Group Properties
      tags:
      - group_property
    post:
      consumes:
      - application/json
      description: API for creating group_property
      parameters:
      - description: group property
        in: body
        name: group_property
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.GroupPropertySwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create group_property
      tags:
      - group_property
  /v1/group-property-status/{status_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: status_id
        in: path
        name: status_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllGroupPropertyByStatusIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get group property
      tags:
      - group_property
  /v1/group-property-type:
    get:
      consumes:
      - application/json
      description: API for getting all group properties by type
      parameters:
      - description: step
        in: query
        name: step
        required: true
        type: integer
      - description: type
        in: query
        name: type
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllGroupPropertiesByTypeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Group Properties By Type
      tags:
      - group_property
  /v1/group-property/{group_property_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: group_property_id
        in: path
        name: group_property_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GroupProperty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get group property
      tags:
      - group_property
    put:
      consumes:
      - application/json
      description: API for updating group property
      parameters:
      - description: group_property_id
        in: path
        name: group_property_id
        required: true
        type: string
      - description: group property
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.GroupPropertySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Group Property
      tags:
      - group_property
  /v1/image-upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: image
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.FilesResponse'
      tags:
      - file_upload
  /v1/login:
    post:
      consumes:
      - application/json
      description: API to singin
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_user_service.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: login
      tags:
      - auth
  /v1/login-exists:
    post:
      consumes:
      - application/json
      description: API to singin
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.LoginExistsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_user_service.LoginExistsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: login
      tags:
      - auth
  /v1/login-refresh:
    post:
      consumes:
      - application/json
      description: API to get your access token with refresh
      parameters:
      - description: refresh_token
        in: query
        name: refresh_token
        required: true
        type: string
      - description: is_applicant
        in: query
        name: is_applicant
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_user_service.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: if access-token expired, get your access token with refresh
      tags:
      - auth
  /v1/news:
    get:
      consumes:
      - application/json
      description: API for Get all news
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: active
        in: query
        name: active
        type: boolean
      - description: inactive
        in: query
        name: inactive
        type: boolean
      - description: sort
        in: query
        name: sort
        type: string
      - description: lang
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_content_service.NewsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get All News
      tags:
      - news
    post:
      consumes:
      - application/json
      description: API for creating news
      parameters:
      - description: news
        in: body
        name: news
        required: true
        schema:
          $ref: '#/definitions/ek_content_service.NewCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/content_service.NewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create news
      tags:
      - news
  /v1/news/{slug}:
    delete:
      consumes:
      - application/json
      description: API for deleting news
      parameters:
      - description: slug
        in: path
        name: slug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete News
      tags:
      - news
    get:
      consumes:
      - application/json
      parameters:
      - description: slug
        in: path
        name: slug
        type: string
      - description: news_id
        in: path
        name: news_id
        type: string
      - description: lang
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.NewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get News
      tags:
      - news
    put:
      consumes:
      - application/json
      description: API for updating news
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      - description: news
        in: body
        name: news
        required: true
        schema:
          $ref: '#/definitions/ek_content_service.NewCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.NewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update News
      tags:
      - news
  /v1/normative:
    get:
      consumes:
      - application/json
      description: API for Get all normative
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: active
        in: query
        name: active
        type: boolean
      - description: inactive
        in: query
        name: inactive
        type: boolean
      - description: sort
        in: query
        name: sort
        type: string
      - description: lang
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_content_service.ListNormativeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get All Normative
      tags:
      - normative
    post:
      consumes:
      - application/json
      description: API for creating normative
      parameters:
      - description: normative
        in: body
        name: normative
        required: true
        schema:
          $ref: '#/definitions/ek_content_service.CreateNormative'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/content_service.NormativeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create normative
      tags:
      - normative
  /v1/normative/{slug}:
    delete:
      consumes:
      - application/json
      description: API for deleting normative
      parameters:
      - description: slug
        in: path
        name: slug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete Normative
      tags:
      - normative
    get:
      consumes:
      - application/json
      parameters:
      - description: slug
        in: path
        name: slug
        type: string
      - description: normative_id
        in: path
        name: normative_id
        type: string
      - description: lang
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.Normative'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Normative
      tags:
      - normative
    put:
      consumes:
      - application/json
      description: API for updating normative
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      - description: news
        in: body
        name: news
        required: true
        schema:
          $ref: '#/definitions/ek_content_service.CreateNormative'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.Normative'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Normative
      tags:
      - normative
  /v1/organization:
    get:
      consumes:
      - application/json
      description: API for getting all organizations
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllOrganizationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Organizations
      tags:
      - organization
    post:
      consumes:
      - application/json
      description: API for creating organization
      parameters:
      - description: organization
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateOrganizationSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create Organization
      tags:
      - organization
  /v1/organization-branches/{organization_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: organization_id
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Organization
      tags:
      - organization
  /v1/organization/{organization_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: organization_id
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Organization
      tags:
      - organization
    put:
      consumes:
      - application/json
      description: API for updating organization
      parameters:
      - description: organization_id
        in: path
        name: organization_id
        required: true
        type: string
      - description: organization
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateOrganizationSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Organization
      tags:
      - organization
  /v1/page:
    get:
      consumes:
      - application/json
      description: API for Get all news
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: active
        in: query
        name: active
        type: boolean
      - description: inactive
        in: query
        name: inactive
        type: boolean
      - description: sort
        in: query
        name: sort
        type: string
      - description: lang
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_content_service.NewsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get All News
      tags:
      - page
    post:
      consumes:
      - application/json
      description: API for creating page
      parameters:
      - description: page
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/ek_content_service.CreatePage'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/content_service.PageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create Page
      tags:
      - page
  /v1/page/{slug}:
    delete:
      consumes:
      - application/json
      description: API for deleting Page
      parameters:
      - description: slug
        in: path
        name: slug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete Page
      tags:
      - page
    get:
      consumes:
      - application/json
      parameters:
      - description: page_id
        in: path
        name: page_id
        type: string
      - description: slug
        in: path
        name: slug
        type: string
      - description: lang
        in: path
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_content_service.PageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Page By Id
      tags:
      - page
    put:
      consumes:
      - application/json
      description: API for updating page
      parameters:
      - description: slug
        in: path
        name: slug
        required: true
        type: string
      - description: page
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/ek_content_service.CreatePage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/content_service.PageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update News
      tags:
      - page
  /v1/parallel-head:
    post:
      consumes:
      - application/json
      description: API for creating parallel
      parameters:
      - description: Parallel
        in: body
        name: parallel
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateParallelHeadSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create parallel
      tags:
      - parallel
  /v1/parallel-head-step:
    patch:
      consumes:
      - application/json
      description: API Create relation parallel-head has many position
      parameters:
      - description: parallel
        in: body
        name: parallel
        required: true
        schema:
          $ref: '#/definitions/discussion_logic_service.CreateRelationHeadHasManyStepsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create relation parallel-head has many position
      tags:
      - parallel
  /v1/parallel-head/{parallel_head_id}:
    patch:
      consumes:
      - application/json
      description: API for updating parallel head position
      parameters:
      - description: parallel_head_id
        in: path
        name: parallel_head_id
        required: true
        type: string
      - description: Parallel
        in: body
        name: parallel
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateHeadTailParallelSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update parallel head position
      tags:
      - parallel
  /v1/parallel-tail:
    post:
      consumes:
      - application/json
      description: API for creating parallel tail
      parameters:
      - description: Parallel
        in: body
        name: parallel
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateParallelTailSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create parallel tail
      tags:
      - parallel
  /v1/parallel-tail-step:
    patch:
      consumes:
      - application/json
      description: API Create relation parallel-tail sends to the position
      parameters:
      - description: parallel
        in: body
        name: parallel
        required: true
        schema:
          $ref: '#/definitions/discussion_logic_service.CreateRelationTailSendsStepRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create relation parallel-tail sends to the position
      tags:
      - parallel
  /v1/parallel-tail/{parallel_tail_id}:
    patch:
      consumes:
      - application/json
      description: API for updating parallel head position
      parameters:
      - description: Parallel
        in: body
        name: parallel
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateHeadTailParallelSwag'
      - description: parallel_tail_id
        in: path
        name: parallel_tail_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update parallel head position
      tags:
      - parallel
  /v1/parallel/{parallel_id}:
    get:
      consumes:
      - application/json
      description: API for getting parallel by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/discussion_logic_service.Parallel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting parallel by id
      tags:
      - parallel
  /v1/permission:
    get:
      consumes:
      - application/json
      description: API for getting all rolees
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All permissions
      tags:
      - permission
    post:
      consumes:
      - application/json
      description: API for creating permission
      parameters:
      - description: permission
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdatePermissionSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create permission
      tags:
      - permission
  /v1/permission/{permission_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: permission_id
        in: path
        name: permission_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Permission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Permission
      tags:
      - permission
    put:
      consumes:
      - application/json
      description: API for updating permission
      parameters:
      - description: permission_id
        in: path
        name: permission_id
        required: true
        type: string
      - description: permission
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdatePermissionSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update permission
      tags:
      - permission
  /v1/product:
    get:
      consumes:
      - application/json
      description: API for getting all productes
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: category_id
        in: query
        name: category_id
        type: string
      - description: owner_id
        in: query
        name: owner_id
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All products
      tags:
      - product
    post:
      consumes:
      - application/json
      description: API for creating product
      parameters:
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateProductSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create product
      tags:
      - product
  /v1/product/{product_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting product
      parameters:
      - description: product_id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: API for getting product
      parameters:
      - description: product_id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: API for updating product
      parameters:
      - description: product_id
        in: path
        name: product_id
        required: true
        type: string
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateProductSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update product
      tags:
      - product
  /v1/property:
    get:
      consumes:
      - application/json
      description: API for getting all properties
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllPropertiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Properties
      tags:
      - property
    post:
      consumes:
      - application/json
      description: API for creating property
      parameters:
      - description: property
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.PropertySwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create property
      tags:
      - property
  /v1/property/{property_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting property
      parameters:
      - description: property_id
        in: path
        name: property_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete Property
      tags:
      - property
    get:
      consumes:
      - application/json
      parameters:
      - description: property_id
        in: path
        name: property_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.Property'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Property
      tags:
      - property
    put:
      consumes:
      - application/json
      description: API for updating property
      parameters:
      - description: property_id
        in: path
        name: property_id
        required: true
        type: string
      - description: property
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.PropertySwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Property
      tags:
      - property
  /v1/region:
    get:
      consumes:
      - application/json
      description: API for getting all regiones
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: soato
        in: query
        name: soato
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllRegionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Getting All regions
      tags:
      - region
    post:
      consumes:
      - application/json
      description: API for creating region
      parameters:
      - description: region
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateRegionSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create region
      tags:
      - region
  /v1/region/{region_id}:
    get:
      consumes:
      - application/json
      description: API for getting region
      parameters:
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get region
      tags:
      - region
    put:
      consumes:
      - application/json
      description: API for updating region
      parameters:
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      - description: region
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateRegionSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update region
      tags:
      - region
  /v1/region/{region_id}/main-file:
    get:
      consumes:
      - application/json
      description: API for getting main file
      parameters:
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.FilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get region main file
      tags:
      - region
  /v1/region/{region_id}/main-file/list:
    get:
      consumes:
      - application/json
      description: API for getting main file
      parameters:
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      - description: name
        in: query
        name: name
        type: string
      - description: type
        in: query
        name: type
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_setting_service.GetAllRegionFilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get region main file
      tags:
      - region
  /v1/region/{region_id}/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      - description: body
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.RegionFilesSwag'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.FilesResponse'
      tags:
      - file_upload
  /v1/region/main-file/{file_id}:
    get:
      consumes:
      - application/json
      description: API for getting main file
      parameters:
      - description: region_id
        in: path
        name: region_id
        required: true
        type: string
      - description: file_id
        in: path
        name: file_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.FilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get region main file
      tags:
      - region
  /v1/region/region-file:
    post:
      consumes:
      - application/json
      description: API for creating region
      parameters:
      - description: region
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.RegionFilesSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create region
      tags:
      - region
  /v1/regions/{city_id}:
    get:
      consumes:
      - application/json
      description: API for getting all regiones by city ID
      parameters:
      - description: city_id
        in: path
        name: city_id
        required: true
        type: string
      - description: name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllRegionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All regions by city ID
      tags:
      - region
  /v1/role:
    get:
      consumes:
      - application/json
      description: API for getting all rolees
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: organization_id
        in: query
        name: organization_id
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All roles
      tags:
      - role
    post:
      consumes:
      - application/json
      description: API for creating role
      parameters:
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateRoleSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create role
      tags:
      - role
  /v1/role/{role_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting role
      parameters:
      - description: role_id
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete Role
      tags:
      - role
    get:
      consumes:
      - application/json
      description: API for getting role
      parameters:
      - description: role_id
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get role
      tags:
      - role
    put:
      consumes:
      - application/json
      description: API for updating role
      parameters:
      - description: role_id
        in: path
        name: role_id
        required: true
        type: string
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateRoleSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update role
      tags:
      - role
  /v1/role/code:
    get:
      consumes:
      - application/json
      description: API for getting all rolees by code
      parameters:
      - description: code
        in: query
        name: code
        type: integer
      - description: organization_id
        in: query
        name: organization_id
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllRolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All roles by code
      tags:
      - role
  /v1/staff:
    get:
      consumes:
      - application/json
      description: API for getting all staff
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: organization_id
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: phone_number
        type: string
      - in: query
        name: role_id
        type: string
      - in: query
        name: search_string
        type: string
      - in: query
        name: soato
        type: string
      - in: query
        name: status
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetAllStaffsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Staffs
      tags:
      - staff
    post:
      consumes:
      - application/json
      description: API for creating staff
      parameters:
      - description: Staff
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateStaffSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user_service.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: staff
      tags:
      - staff
  /v1/staff-by-token:
    get:
      consumes:
      - application/json
      description: API for getting staff
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Staff'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Staff by token
      tags:
      - staff
  /v1/staff/{staff_id}:
    get:
      consumes:
      - application/json
      description: API for getting staff
      parameters:
      - description: staff_id
        in: path
        name: staff_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Staff'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Staff
      tags:
      - staff
    put:
      consumes:
      - application/json
      description: API for updating staff
      parameters:
      - description: staff_id
        in: path
        name: staff_id
        required: true
        type: string
      - description: staff
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.CreateUpdateStaffSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Staff
      tags:
      - staff
  /v1/status:
    get:
      consumes:
      - application/json
      description: API for getting all statuses
      parameters:
      - description: parent_status_id
        in: query
        name: parent_status_id
        type: string
      - description: name
        in: query
        name: name
        type: string
      - description: type_code
        in: query
        name: type_code
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity_service.GetAllStatusesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All Statuses
      tags:
      - status
    post:
      consumes:
      - application/json
      description: API for creating status
      parameters:
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.StatusSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create Status
      tags:
      - status
  /v1/status/{status_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting status
      parameters:
      - description: status_id
        in: path
        name: status_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete Status
      tags:
      - status
    get:
      consumes:
      - application/json
      parameters:
      - description: status_id
        in: path
        name: status_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_entity_service.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get Status
      tags:
      - status
    put:
      consumes:
      - application/json
      description: API for updating status
      parameters:
      - description: status_id
        in: path
        name: status_id
        required: true
        type: string
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/ek_entity_service.StatusSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update Status
      tags:
      - status
  /v1/step:
    post:
      consumes:
      - application/json
      description: API for creating step
      parameters:
      - description: step
        in: body
        name: step
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateStepSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create step
      tags:
      - step
  /v1/step-actions/{step_id}:
    put:
      consumes:
      - application/json
      description: API for updating step actions
      parameters:
      - description: step_id
        in: path
        name: step_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update step actions
      tags:
      - step
  /v1/step-previous:
    patch:
      consumes:
      - application/json
      description: API for getting previous status for entity
      parameters:
      - description: step
        in: body
        name: step
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.GetPrevStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get by previous status for entity
      tags:
      - step
  /v1/step-role:
    post:
      consumes:
      - application/json
      description: API for getting by role id method
      parameters:
      - description: query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.GetStepByRoleIDSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.GetStepByRoleIDResponseSwag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: Get by role id method
      tags:
      - step
  /v1/step/{step_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting step
      parameters:
      - description: step_id
        in: path
        name: step_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Delete Step
      tags:
      - step
    get:
      consumes:
      - application/json
      description: API for getting step
      parameters:
      - description: step_id
        in: path
        name: step_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_discussion_logic_service.GetOneStep'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get step
      tags:
      - step
    patch:
      consumes:
      - application/json
      description: API for updating step position
      parameters:
      - description: step_id
        in: path
        name: step_id
        required: true
        type: string
      - description: step
        in: body
        name: step
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.UpdateStepPositionSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update step position
      tags:
      - step
    put:
      consumes:
      - application/json
      description: API for updating step
      parameters:
      - description: step_id
        in: path
        name: step_id
        required: true
        type: string
      - description: step
        in: body
        name: step
        required: true
        schema:
          $ref: '#/definitions/ek_discussion_logic_service.CreateUpdateStepSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ek_variables.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update step
      tags:
      - step
  /v1/tax/{district_id}:
    patch:
      consumes:
      - application/json
      description: API for updating district tax and cost
      parameters:
      - description: district_id
        in: path
        name: district_id
        required: true
        type: string
      - description: tax
        in: body
        name: tax
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.UpdateDistrictTaxSwag'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update district tax
      tags:
      - district
  /v1/update-password:
    post:
      consumes:
      - application/json
      description: API to update user password
      parameters:
      - description: Update password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.UpdatePassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: update user password
      tags:
      - auth
  /v1/update-password/{user_id}:
    post:
      consumes:
      - application/json
      description: API to update user password
      parameters:
      - description: User id
        in: path
        name: user_id
        required: true
        type: string
      - description: Update password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/ek_user_service.UpdatePassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ek_variables.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      security:
      - ApiKeyAuth: []
      summary: update user password
      tags:
      - auth
  /v1/user:
    get:
      consumes:
      - application/json
      description: API for getting all useres
      parameters:
      - description: name
        in: query
        name: name
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.GetAllUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Getting All users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: API for creating user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateUserSwag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Create user
      tags:
      - user
  /v1/user-exists:
    post:
      consumes:
      - application/json
      description: API for getting user
      parameters:
      - description: login
        in: query
        name: login
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.UserExistsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get User
      tags:
      - user
  /v1/user/{user_id}:
    get:
      consumes:
      - application/json
      description: API for getting user
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Get User
      tags:
      - user
    put:
      consumes:
      - application/json
      description: API for updating user
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ek_setting_service.CreateUpdateUserSwag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/setting_service.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ek_variables.FailureResponse'
      summary: Update user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
