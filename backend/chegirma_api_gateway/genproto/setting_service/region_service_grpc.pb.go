// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegionServiceClient is the client API for RegionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionServiceClient interface {
	Create(ctx context.Context, in *CreateUpdateRegion, opts ...grpc.CallOption) (*CreatedResponse, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Region, error)
	GetAll(ctx context.Context, in *GetAllRegionsRequest, opts ...grpc.CallOption) (*GetAllRegionsResponse, error)
	GetAllByCity(ctx context.Context, in *GetAllByCityRequest, opts ...grpc.CallOption) (*GetAllRegionsResponse, error)
	Update(ctx context.Context, in *CreateUpdateRegion, opts ...grpc.CallOption) (*empty.Empty, error)
	RegionExists(ctx context.Context, in *SSExistsRequest, opts ...grpc.CallOption) (*SSExistsResponse, error)
	GetByCode(ctx context.Context, in *GetByCodeRequest, opts ...grpc.CallOption) (*Region, error)
}

type regionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionServiceClient(cc grpc.ClientConnInterface) RegionServiceClient {
	return &regionServiceClient{cc}
}

func (c *regionServiceClient) Create(ctx context.Context, in *CreateUpdateRegion, opts ...grpc.CallOption) (*CreatedResponse, error) {
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Region, error) {
	out := new(Region)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) GetAll(ctx context.Context, in *GetAllRegionsRequest, opts ...grpc.CallOption) (*GetAllRegionsResponse, error) {
	out := new(GetAllRegionsResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) GetAllByCity(ctx context.Context, in *GetAllByCityRequest, opts ...grpc.CallOption) (*GetAllRegionsResponse, error) {
	out := new(GetAllRegionsResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/GetAllByCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) Update(ctx context.Context, in *CreateUpdateRegion, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) RegionExists(ctx context.Context, in *SSExistsRequest, opts ...grpc.CallOption) (*SSExistsResponse, error) {
	out := new(SSExistsResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/RegionExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) GetByCode(ctx context.Context, in *GetByCodeRequest, opts ...grpc.CallOption) (*Region, error) {
	out := new(Region)
	err := c.cc.Invoke(ctx, "/genproto.RegionService/GetByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionServiceServer is the server API for RegionService service.
// All implementations must embed UnimplementedRegionServiceServer
// for forward compatibility
type RegionServiceServer interface {
	Create(context.Context, *CreateUpdateRegion) (*CreatedResponse, error)
	Get(context.Context, *GetReq) (*Region, error)
	GetAll(context.Context, *GetAllRegionsRequest) (*GetAllRegionsResponse, error)
	GetAllByCity(context.Context, *GetAllByCityRequest) (*GetAllRegionsResponse, error)
	Update(context.Context, *CreateUpdateRegion) (*empty.Empty, error)
	RegionExists(context.Context, *SSExistsRequest) (*SSExistsResponse, error)
	GetByCode(context.Context, *GetByCodeRequest) (*Region, error)
	mustEmbedUnimplementedRegionServiceServer()
}

// UnimplementedRegionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegionServiceServer struct {
}

func (UnimplementedRegionServiceServer) Create(context.Context, *CreateUpdateRegion) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRegionServiceServer) Get(context.Context, *GetReq) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRegionServiceServer) GetAll(context.Context, *GetAllRegionsRequest) (*GetAllRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRegionServiceServer) GetAllByCity(context.Context, *GetAllByCityRequest) (*GetAllRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByCity not implemented")
}
func (UnimplementedRegionServiceServer) Update(context.Context, *CreateUpdateRegion) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRegionServiceServer) RegionExists(context.Context, *SSExistsRequest) (*SSExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionExists not implemented")
}
func (UnimplementedRegionServiceServer) GetByCode(context.Context, *GetByCodeRequest) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCode not implemented")
}
func (UnimplementedRegionServiceServer) mustEmbedUnimplementedRegionServiceServer() {}

// UnsafeRegionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionServiceServer will
// result in compilation errors.
type UnsafeRegionServiceServer interface {
	mustEmbedUnimplementedRegionServiceServer()
}

func RegisterRegionServiceServer(s grpc.ServiceRegistrar, srv RegionServiceServer) {
	s.RegisterService(&RegionService_ServiceDesc, srv)
}

func _RegionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateRegion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).Create(ctx, req.(*CreateUpdateRegion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).GetAll(ctx, req.(*GetAllRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_GetAllByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).GetAllByCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/GetAllByCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).GetAllByCity(ctx, req.(*GetAllByCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateRegion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).Update(ctx, req.(*CreateUpdateRegion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_RegionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).RegionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/RegionExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).RegionExists(ctx, req.(*SSExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_GetByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).GetByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionService/GetByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).GetByCode(ctx, req.(*GetByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionService_ServiceDesc is the grpc.ServiceDesc for RegionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.RegionService",
	HandlerType: (*RegionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RegionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RegionService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _RegionService_GetAll_Handler,
		},
		{
			MethodName: "GetAllByCity",
			Handler:    _RegionService_GetAllByCity_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RegionService_Update_Handler,
		},
		{
			MethodName: "RegionExists",
			Handler:    _RegionService_RegionExists_Handler,
		},
		{
			MethodName: "GetByCode",
			Handler:    _RegionService_GetByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "region_service.proto",
}
