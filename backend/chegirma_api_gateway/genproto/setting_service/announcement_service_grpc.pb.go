// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnnouncementServiceClient is the client API for AnnouncementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementServiceClient interface {
	Create(ctx context.Context, in *CreateOrUpdateAnnouncement, opts ...grpc.CallOption) (*CreatedResponse, error)
	Update(ctx context.Context, in *CreateOrUpdateAnnouncement, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Announcement, error)
	GetAll(ctx context.Context, in *GetAllAnnouncementsRequest, opts ...grpc.CallOption) (*GetAllAnnouncementsResponse, error)
}

type announcementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementServiceClient(cc grpc.ClientConnInterface) AnnouncementServiceClient {
	return &announcementServiceClient{cc}
}

func (c *announcementServiceClient) Create(ctx context.Context, in *CreateOrUpdateAnnouncement, opts ...grpc.CallOption) (*CreatedResponse, error) {
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, "/genproto.AnnouncementService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) Update(ctx context.Context, in *CreateOrUpdateAnnouncement, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.AnnouncementService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, "/genproto.AnnouncementService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) GetAll(ctx context.Context, in *GetAllAnnouncementsRequest, opts ...grpc.CallOption) (*GetAllAnnouncementsResponse, error) {
	out := new(GetAllAnnouncementsResponse)
	err := c.cc.Invoke(ctx, "/genproto.AnnouncementService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementServiceServer is the server API for AnnouncementService service.
// All implementations must embed UnimplementedAnnouncementServiceServer
// for forward compatibility
type AnnouncementServiceServer interface {
	Create(context.Context, *CreateOrUpdateAnnouncement) (*CreatedResponse, error)
	Update(context.Context, *CreateOrUpdateAnnouncement) (*empty.Empty, error)
	Get(context.Context, *GetReq) (*Announcement, error)
	GetAll(context.Context, *GetAllAnnouncementsRequest) (*GetAllAnnouncementsResponse, error)
	mustEmbedUnimplementedAnnouncementServiceServer()
}

// UnimplementedAnnouncementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementServiceServer struct {
}

func (UnimplementedAnnouncementServiceServer) Create(context.Context, *CreateOrUpdateAnnouncement) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAnnouncementServiceServer) Update(context.Context, *CreateOrUpdateAnnouncement) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAnnouncementServiceServer) Get(context.Context, *GetReq) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAnnouncementServiceServer) GetAll(context.Context, *GetAllAnnouncementsRequest) (*GetAllAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAnnouncementServiceServer) mustEmbedUnimplementedAnnouncementServiceServer() {}

// UnsafeAnnouncementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementServiceServer will
// result in compilation errors.
type UnsafeAnnouncementServiceServer interface {
	mustEmbedUnimplementedAnnouncementServiceServer()
}

func RegisterAnnouncementServiceServer(s grpc.ServiceRegistrar, srv AnnouncementServiceServer) {
	s.RegisterService(&AnnouncementService_ServiceDesc, srv)
}

func _AnnouncementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AnnouncementService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).Create(ctx, req.(*CreateOrUpdateAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AnnouncementService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).Update(ctx, req.(*CreateOrUpdateAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AnnouncementService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AnnouncementService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).GetAll(ctx, req.(*GetAllAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementService_ServiceDesc is the grpc.ServiceDesc for AnnouncementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.AnnouncementService",
	HandlerType: (*AnnouncementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AnnouncementService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AnnouncementService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AnnouncementService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AnnouncementService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "announcement_service.proto",
}
