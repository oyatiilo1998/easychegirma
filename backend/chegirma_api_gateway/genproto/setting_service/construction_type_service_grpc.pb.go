// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConstructionTypeServiceClient is the client API for ConstructionTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConstructionTypeServiceClient interface {
	Create(ctx context.Context, in *CreateUpdateConstructionType, opts ...grpc.CallOption) (*CTCreateResponse, error)
	Get(ctx context.Context, in *CTGetRequest, opts ...grpc.CallOption) (*ConstructionType, error)
	GetAll(ctx context.Context, in *GetAllConstructionTypesRequest, opts ...grpc.CallOption) (*GetAllConstructionTypesResponse, error)
	Update(ctx context.Context, in *CreateUpdateConstructionType, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *CTDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ConstructionTypeExists(ctx context.Context, in *CTExistsRequest, opts ...grpc.CallOption) (*CTExistsResponse, error)
}

type constructionTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConstructionTypeServiceClient(cc grpc.ClientConnInterface) ConstructionTypeServiceClient {
	return &constructionTypeServiceClient{cc}
}

func (c *constructionTypeServiceClient) Create(ctx context.Context, in *CreateUpdateConstructionType, opts ...grpc.CallOption) (*CTCreateResponse, error) {
	out := new(CTCreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.ConstructionTypeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructionTypeServiceClient) Get(ctx context.Context, in *CTGetRequest, opts ...grpc.CallOption) (*ConstructionType, error) {
	out := new(ConstructionType)
	err := c.cc.Invoke(ctx, "/genproto.ConstructionTypeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructionTypeServiceClient) GetAll(ctx context.Context, in *GetAllConstructionTypesRequest, opts ...grpc.CallOption) (*GetAllConstructionTypesResponse, error) {
	out := new(GetAllConstructionTypesResponse)
	err := c.cc.Invoke(ctx, "/genproto.ConstructionTypeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructionTypeServiceClient) Update(ctx context.Context, in *CreateUpdateConstructionType, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ConstructionTypeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructionTypeServiceClient) Delete(ctx context.Context, in *CTDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ConstructionTypeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constructionTypeServiceClient) ConstructionTypeExists(ctx context.Context, in *CTExistsRequest, opts ...grpc.CallOption) (*CTExistsResponse, error) {
	out := new(CTExistsResponse)
	err := c.cc.Invoke(ctx, "/genproto.ConstructionTypeService/ConstructionTypeExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConstructionTypeServiceServer is the server API for ConstructionTypeService service.
// All implementations must embed UnimplementedConstructionTypeServiceServer
// for forward compatibility
type ConstructionTypeServiceServer interface {
	Create(context.Context, *CreateUpdateConstructionType) (*CTCreateResponse, error)
	Get(context.Context, *CTGetRequest) (*ConstructionType, error)
	GetAll(context.Context, *GetAllConstructionTypesRequest) (*GetAllConstructionTypesResponse, error)
	Update(context.Context, *CreateUpdateConstructionType) (*empty.Empty, error)
	Delete(context.Context, *CTDeleteRequest) (*empty.Empty, error)
	ConstructionTypeExists(context.Context, *CTExistsRequest) (*CTExistsResponse, error)
	mustEmbedUnimplementedConstructionTypeServiceServer()
}

// UnimplementedConstructionTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConstructionTypeServiceServer struct {
}

func (UnimplementedConstructionTypeServiceServer) Create(context.Context, *CreateUpdateConstructionType) (*CTCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConstructionTypeServiceServer) Get(context.Context, *CTGetRequest) (*ConstructionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConstructionTypeServiceServer) GetAll(context.Context, *GetAllConstructionTypesRequest) (*GetAllConstructionTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedConstructionTypeServiceServer) Update(context.Context, *CreateUpdateConstructionType) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConstructionTypeServiceServer) Delete(context.Context, *CTDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConstructionTypeServiceServer) ConstructionTypeExists(context.Context, *CTExistsRequest) (*CTExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstructionTypeExists not implemented")
}
func (UnimplementedConstructionTypeServiceServer) mustEmbedUnimplementedConstructionTypeServiceServer() {
}

// UnsafeConstructionTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConstructionTypeServiceServer will
// result in compilation errors.
type UnsafeConstructionTypeServiceServer interface {
	mustEmbedUnimplementedConstructionTypeServiceServer()
}

func RegisterConstructionTypeServiceServer(s grpc.ServiceRegistrar, srv ConstructionTypeServiceServer) {
	s.RegisterService(&ConstructionTypeService_ServiceDesc, srv)
}

func _ConstructionTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateConstructionType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructionTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ConstructionTypeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructionTypeServiceServer).Create(ctx, req.(*CreateUpdateConstructionType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructionTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructionTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ConstructionTypeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructionTypeServiceServer).Get(ctx, req.(*CTGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructionTypeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConstructionTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructionTypeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ConstructionTypeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructionTypeServiceServer).GetAll(ctx, req.(*GetAllConstructionTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructionTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateConstructionType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructionTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ConstructionTypeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructionTypeServiceServer).Update(ctx, req.(*CreateUpdateConstructionType))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructionTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructionTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ConstructionTypeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructionTypeServiceServer).Delete(ctx, req.(*CTDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConstructionTypeService_ConstructionTypeExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstructionTypeServiceServer).ConstructionTypeExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ConstructionTypeService/ConstructionTypeExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstructionTypeServiceServer).ConstructionTypeExists(ctx, req.(*CTExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConstructionTypeService_ServiceDesc is the grpc.ServiceDesc for ConstructionTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConstructionTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.ConstructionTypeService",
	HandlerType: (*ConstructionTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConstructionTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConstructionTypeService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ConstructionTypeService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConstructionTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConstructionTypeService_Delete_Handler,
		},
		{
			MethodName: "ConstructionTypeExists",
			Handler:    _ConstructionTypeService_ConstructionTypeExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "construction_type_service.proto",
}
