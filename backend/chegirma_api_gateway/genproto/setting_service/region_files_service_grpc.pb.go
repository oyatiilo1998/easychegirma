// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegionFilesServiceClient is the client API for RegionFilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionFilesServiceClient interface {
	Create(ctx context.Context, in *RegionFiles, opts ...grpc.CallOption) (*CTCreateResponse, error)
	Get(ctx context.Context, in *CTGetRequest, opts ...grpc.CallOption) (*RegionFiles, error)
	GetLatestFile(ctx context.Context, in *GetRegionFilesRequest, opts ...grpc.CallOption) (*RegionFiles, error)
	GetAll(ctx context.Context, in *GetAllRegionFilesRequest, opts ...grpc.CallOption) (*GetAllRegionFilesResponse, error)
	Update(ctx context.Context, in *RegionFiles, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *CTDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RegionFilesExists(ctx context.Context, in *CTExistsRequest, opts ...grpc.CallOption) (*CTExistsResponse, error)
}

type regionFilesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionFilesServiceClient(cc grpc.ClientConnInterface) RegionFilesServiceClient {
	return &regionFilesServiceClient{cc}
}

func (c *regionFilesServiceClient) Create(ctx context.Context, in *RegionFiles, opts ...grpc.CallOption) (*CTCreateResponse, error) {
	out := new(CTCreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionFilesServiceClient) Get(ctx context.Context, in *CTGetRequest, opts ...grpc.CallOption) (*RegionFiles, error) {
	out := new(RegionFiles)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionFilesServiceClient) GetLatestFile(ctx context.Context, in *GetRegionFilesRequest, opts ...grpc.CallOption) (*RegionFiles, error) {
	out := new(RegionFiles)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/GetLatestFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionFilesServiceClient) GetAll(ctx context.Context, in *GetAllRegionFilesRequest, opts ...grpc.CallOption) (*GetAllRegionFilesResponse, error) {
	out := new(GetAllRegionFilesResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionFilesServiceClient) Update(ctx context.Context, in *RegionFiles, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionFilesServiceClient) Delete(ctx context.Context, in *CTDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionFilesServiceClient) RegionFilesExists(ctx context.Context, in *CTExistsRequest, opts ...grpc.CallOption) (*CTExistsResponse, error) {
	out := new(CTExistsResponse)
	err := c.cc.Invoke(ctx, "/genproto.RegionFilesService/RegionFilesExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionFilesServiceServer is the server API for RegionFilesService service.
// All implementations must embed UnimplementedRegionFilesServiceServer
// for forward compatibility
type RegionFilesServiceServer interface {
	Create(context.Context, *RegionFiles) (*CTCreateResponse, error)
	Get(context.Context, *CTGetRequest) (*RegionFiles, error)
	GetLatestFile(context.Context, *GetRegionFilesRequest) (*RegionFiles, error)
	GetAll(context.Context, *GetAllRegionFilesRequest) (*GetAllRegionFilesResponse, error)
	Update(context.Context, *RegionFiles) (*empty.Empty, error)
	Delete(context.Context, *CTDeleteRequest) (*empty.Empty, error)
	RegionFilesExists(context.Context, *CTExistsRequest) (*CTExistsResponse, error)
	mustEmbedUnimplementedRegionFilesServiceServer()
}

// UnimplementedRegionFilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegionFilesServiceServer struct {
}

func (UnimplementedRegionFilesServiceServer) Create(context.Context, *RegionFiles) (*CTCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRegionFilesServiceServer) Get(context.Context, *CTGetRequest) (*RegionFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRegionFilesServiceServer) GetLatestFile(context.Context, *GetRegionFilesRequest) (*RegionFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestFile not implemented")
}
func (UnimplementedRegionFilesServiceServer) GetAll(context.Context, *GetAllRegionFilesRequest) (*GetAllRegionFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRegionFilesServiceServer) Update(context.Context, *RegionFiles) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRegionFilesServiceServer) Delete(context.Context, *CTDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRegionFilesServiceServer) RegionFilesExists(context.Context, *CTExistsRequest) (*CTExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionFilesExists not implemented")
}
func (UnimplementedRegionFilesServiceServer) mustEmbedUnimplementedRegionFilesServiceServer() {}

// UnsafeRegionFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionFilesServiceServer will
// result in compilation errors.
type UnsafeRegionFilesServiceServer interface {
	mustEmbedUnimplementedRegionFilesServiceServer()
}

func RegisterRegionFilesServiceServer(s grpc.ServiceRegistrar, srv RegionFilesServiceServer) {
	s.RegisterService(&RegionFilesService_ServiceDesc, srv)
}

func _RegionFilesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).Create(ctx, req.(*RegionFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionFilesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).Get(ctx, req.(*CTGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionFilesService_GetLatestFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).GetLatestFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/GetLatestFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).GetLatestFile(ctx, req.(*GetRegionFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionFilesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRegionFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).GetAll(ctx, req.(*GetAllRegionFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionFilesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).Update(ctx, req.(*RegionFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionFilesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).Delete(ctx, req.(*CTDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionFilesService_RegionFilesExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CTExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionFilesServiceServer).RegionFilesExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RegionFilesService/RegionFilesExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionFilesServiceServer).RegionFilesExists(ctx, req.(*CTExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionFilesService_ServiceDesc is the grpc.ServiceDesc for RegionFilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionFilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.RegionFilesService",
	HandlerType: (*RegionFilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RegionFilesService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RegionFilesService_Get_Handler,
		},
		{
			MethodName: "GetLatestFile",
			Handler:    _RegionFilesService_GetLatestFile_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _RegionFilesService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RegionFilesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RegionFilesService_Delete_Handler,
		},
		{
			MethodName: "RegionFilesExists",
			Handler:    _RegionFilesService_RegionFilesExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "region_files_service.proto",
}
