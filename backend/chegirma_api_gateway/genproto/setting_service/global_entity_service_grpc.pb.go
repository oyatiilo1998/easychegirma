// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalEntityServiceClient is the client API for GlobalEntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalEntityServiceClient interface {
	Create(ctx context.Context, in *CreateOrUpdateGlobalEntity, opts ...grpc.CallOption) (*CreatedResponse, error)
	Update(ctx context.Context, in *CreateOrUpdateGlobalEntity, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GlobalEntity, error)
	GetAll(ctx context.Context, in *GetAllGlobalEntitiesRequest, opts ...grpc.CallOption) (GlobalEntityService_GetAllClient, error)
}

type globalEntityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalEntityServiceClient(cc grpc.ClientConnInterface) GlobalEntityServiceClient {
	return &globalEntityServiceClient{cc}
}

func (c *globalEntityServiceClient) Create(ctx context.Context, in *CreateOrUpdateGlobalEntity, opts ...grpc.CallOption) (*CreatedResponse, error) {
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, "/genproto.GlobalEntityService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntityServiceClient) Update(ctx context.Context, in *CreateOrUpdateGlobalEntity, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GlobalEntityService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntityServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GlobalEntity, error) {
	out := new(GlobalEntity)
	err := c.cc.Invoke(ctx, "/genproto.GlobalEntityService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntityServiceClient) GetAll(ctx context.Context, in *GetAllGlobalEntitiesRequest, opts ...grpc.CallOption) (GlobalEntityService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalEntityService_ServiceDesc.Streams[0], "/genproto.GlobalEntityService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalEntityServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalEntityService_GetAllClient interface {
	Recv() (*GlobalEntity, error)
	grpc.ClientStream
}

type globalEntityServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *globalEntityServiceGetAllClient) Recv() (*GlobalEntity, error) {
	m := new(GlobalEntity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalEntityServiceServer is the server API for GlobalEntityService service.
// All implementations must embed UnimplementedGlobalEntityServiceServer
// for forward compatibility
type GlobalEntityServiceServer interface {
	Create(context.Context, *CreateOrUpdateGlobalEntity) (*CreatedResponse, error)
	Update(context.Context, *CreateOrUpdateGlobalEntity) (*empty.Empty, error)
	Get(context.Context, *GetReq) (*GlobalEntity, error)
	GetAll(*GetAllGlobalEntitiesRequest, GlobalEntityService_GetAllServer) error
	mustEmbedUnimplementedGlobalEntityServiceServer()
}

// UnimplementedGlobalEntityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalEntityServiceServer struct {
}

func (UnimplementedGlobalEntityServiceServer) Create(context.Context, *CreateOrUpdateGlobalEntity) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGlobalEntityServiceServer) Update(context.Context, *CreateOrUpdateGlobalEntity) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGlobalEntityServiceServer) Get(context.Context, *GetReq) (*GlobalEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGlobalEntityServiceServer) GetAll(*GetAllGlobalEntitiesRequest, GlobalEntityService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGlobalEntityServiceServer) mustEmbedUnimplementedGlobalEntityServiceServer() {}

// UnsafeGlobalEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalEntityServiceServer will
// result in compilation errors.
type UnsafeGlobalEntityServiceServer interface {
	mustEmbedUnimplementedGlobalEntityServiceServer()
}

func RegisterGlobalEntityServiceServer(s grpc.ServiceRegistrar, srv GlobalEntityServiceServer) {
	s.RegisterService(&GlobalEntityService_ServiceDesc, srv)
}

func _GlobalEntityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGlobalEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalEntityService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntityServiceServer).Create(ctx, req.(*CreateOrUpdateGlobalEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGlobalEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalEntityService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntityServiceServer).Update(ctx, req.(*CreateOrUpdateGlobalEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalEntityService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntityServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntityService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllGlobalEntitiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalEntityServiceServer).GetAll(m, &globalEntityServiceGetAllServer{stream})
}

type GlobalEntityService_GetAllServer interface {
	Send(*GlobalEntity) error
	grpc.ServerStream
}

type globalEntityServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *globalEntityServiceGetAllServer) Send(m *GlobalEntity) error {
	return x.ServerStream.SendMsg(m)
}

// GlobalEntityService_ServiceDesc is the grpc.ServiceDesc for GlobalEntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalEntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.GlobalEntityService",
	HandlerType: (*GlobalEntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GlobalEntityService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GlobalEntityService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GlobalEntityService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _GlobalEntityService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "global_entity_service.proto",
}
