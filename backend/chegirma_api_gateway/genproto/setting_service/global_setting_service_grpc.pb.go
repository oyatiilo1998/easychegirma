// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalSettingServiceClient is the client API for GlobalSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalSettingServiceClient interface {
	Get(ctx context.Context, in *GSGetReq, opts ...grpc.CallOption) (*GlobalSetting, error)
	Update(ctx context.Context, in *GlobalSetting, opts ...grpc.CallOption) (*empty.Empty, error)
}

type globalSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalSettingServiceClient(cc grpc.ClientConnInterface) GlobalSettingServiceClient {
	return &globalSettingServiceClient{cc}
}

func (c *globalSettingServiceClient) Get(ctx context.Context, in *GSGetReq, opts ...grpc.CallOption) (*GlobalSetting, error) {
	out := new(GlobalSetting)
	err := c.cc.Invoke(ctx, "/genproto.GlobalSettingService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalSettingServiceClient) Update(ctx context.Context, in *GlobalSetting, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GlobalSettingService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalSettingServiceServer is the server API for GlobalSettingService service.
// All implementations must embed UnimplementedGlobalSettingServiceServer
// for forward compatibility
type GlobalSettingServiceServer interface {
	Get(context.Context, *GSGetReq) (*GlobalSetting, error)
	Update(context.Context, *GlobalSetting) (*empty.Empty, error)
	mustEmbedUnimplementedGlobalSettingServiceServer()
}

// UnimplementedGlobalSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalSettingServiceServer struct {
}

func (UnimplementedGlobalSettingServiceServer) Get(context.Context, *GSGetReq) (*GlobalSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGlobalSettingServiceServer) Update(context.Context, *GlobalSetting) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGlobalSettingServiceServer) mustEmbedUnimplementedGlobalSettingServiceServer() {}

// UnsafeGlobalSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalSettingServiceServer will
// result in compilation errors.
type UnsafeGlobalSettingServiceServer interface {
	mustEmbedUnimplementedGlobalSettingServiceServer()
}

func RegisterGlobalSettingServiceServer(s grpc.ServiceRegistrar, srv GlobalSettingServiceServer) {
	s.RegisterService(&GlobalSettingService_ServiceDesc, srv)
}

func _GlobalSettingService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalSettingServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalSettingService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalSettingServiceServer).Get(ctx, req.(*GSGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalSettingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalSettingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalSettingService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalSettingServiceServer).Update(ctx, req.(*GlobalSetting))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalSettingService_ServiceDesc is the grpc.ServiceDesc for GlobalSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.GlobalSettingService",
	HandlerType: (*GlobalSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GlobalSettingService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GlobalSettingService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "global_setting_service.proto",
}
