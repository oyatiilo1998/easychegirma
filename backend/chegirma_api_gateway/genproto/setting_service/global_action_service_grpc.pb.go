// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setting_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalActionServiceClient is the client API for GlobalActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalActionServiceClient interface {
	Create(ctx context.Context, in *CreateOrUpdateGlobalAction, opts ...grpc.CallOption) (*CreatedResponse, error)
	Update(ctx context.Context, in *CreateOrUpdateGlobalAction, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GlobalAction, error)
	GetAll(ctx context.Context, in *GetAllGlobalActionsRequest, opts ...grpc.CallOption) (GlobalActionService_GetAllClient, error)
}

type globalActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalActionServiceClient(cc grpc.ClientConnInterface) GlobalActionServiceClient {
	return &globalActionServiceClient{cc}
}

func (c *globalActionServiceClient) Create(ctx context.Context, in *CreateOrUpdateGlobalAction, opts ...grpc.CallOption) (*CreatedResponse, error) {
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, "/genproto.GlobalActionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalActionServiceClient) Update(ctx context.Context, in *CreateOrUpdateGlobalAction, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GlobalActionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalActionServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GlobalAction, error) {
	out := new(GlobalAction)
	err := c.cc.Invoke(ctx, "/genproto.GlobalActionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalActionServiceClient) GetAll(ctx context.Context, in *GetAllGlobalActionsRequest, opts ...grpc.CallOption) (GlobalActionService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalActionService_ServiceDesc.Streams[0], "/genproto.GlobalActionService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalActionServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalActionService_GetAllClient interface {
	Recv() (*GlobalAction, error)
	grpc.ClientStream
}

type globalActionServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *globalActionServiceGetAllClient) Recv() (*GlobalAction, error) {
	m := new(GlobalAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalActionServiceServer is the server API for GlobalActionService service.
// All implementations must embed UnimplementedGlobalActionServiceServer
// for forward compatibility
type GlobalActionServiceServer interface {
	Create(context.Context, *CreateOrUpdateGlobalAction) (*CreatedResponse, error)
	Update(context.Context, *CreateOrUpdateGlobalAction) (*empty.Empty, error)
	Get(context.Context, *GetReq) (*GlobalAction, error)
	GetAll(*GetAllGlobalActionsRequest, GlobalActionService_GetAllServer) error
	mustEmbedUnimplementedGlobalActionServiceServer()
}

// UnimplementedGlobalActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalActionServiceServer struct {
}

func (UnimplementedGlobalActionServiceServer) Create(context.Context, *CreateOrUpdateGlobalAction) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGlobalActionServiceServer) Update(context.Context, *CreateOrUpdateGlobalAction) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGlobalActionServiceServer) Get(context.Context, *GetReq) (*GlobalAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGlobalActionServiceServer) GetAll(*GetAllGlobalActionsRequest, GlobalActionService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGlobalActionServiceServer) mustEmbedUnimplementedGlobalActionServiceServer() {}

// UnsafeGlobalActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalActionServiceServer will
// result in compilation errors.
type UnsafeGlobalActionServiceServer interface {
	mustEmbedUnimplementedGlobalActionServiceServer()
}

func RegisterGlobalActionServiceServer(s grpc.ServiceRegistrar, srv GlobalActionServiceServer) {
	s.RegisterService(&GlobalActionService_ServiceDesc, srv)
}

func _GlobalActionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGlobalAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalActionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalActionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalActionServiceServer).Create(ctx, req.(*CreateOrUpdateGlobalAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalActionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGlobalAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalActionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalActionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalActionServiceServer).Update(ctx, req.(*CreateOrUpdateGlobalAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalActionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalActionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GlobalActionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalActionServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalActionService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllGlobalActionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalActionServiceServer).GetAll(m, &globalActionServiceGetAllServer{stream})
}

type GlobalActionService_GetAllServer interface {
	Send(*GlobalAction) error
	grpc.ServerStream
}

type globalActionServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *globalActionServiceGetAllServer) Send(m *GlobalAction) error {
	return x.ServerStream.SendMsg(m)
}

// GlobalActionService_ServiceDesc is the grpc.ServiceDesc for GlobalActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.GlobalActionService",
	HandlerType: (*GlobalActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GlobalActionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GlobalActionService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GlobalActionService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _GlobalActionService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "global_action_service.proto",
}
